//!run
import {loadScriptTag} from "acepad-os";
import {showIframe} from "acepad-widget";
let compiler;
async function init(){
    if(compiler)return compiler;
    if(typeof requirejs!="function"){
        await loadScriptTag("js/lib/require.js");
    }
    await loadScriptTag("js/reqConf2.js");
    console.log("reqConf2",reqConf);
    reqConf.paths.FS="acepad/FSStub";
    requirejs.config(reqConf);
    window.WebSite={runType:"IDE"};
    const WebSite=await loadScriptTag("WebSite");
    console.log("WS",WebSite);
    let BuilderClient=await loadScriptTag("BuilderClient4Sys");
    const IDEProject=await loadScriptTag("IDEProject");
    let ns2depspec=[
	    {
	        namespace:"kernel", 
	        url: WebSite.compiledKernel/*"Kernel/js/concat.js"*/
	    },
	    {namespace:"mapEditor2", url: WebSite.compiledTools.mapEditor2},
	];
    compiler={
        create(ide){
            const curPrj=IDEProject.create({dir:ide.dir,ide});
            const c=new BuilderClient(curPrj ,{
                worker: {
                    ns2depspec, 
                    url: "BuilderWorker.js"/*WORKER_URL*/
                },
                //locale:R.getLocale()
            });
            return c;
        },
    };
    return compiler;
}
async function resEditor(prj,type){
    const ResEditors=await loadScriptTag("ResEditors");
    const WebSite=await loadScriptTag("WebSite");
    //const EC=await loadScriptTag("exceptionCatcher");
    const resEditors=new ResEditors(prj);
    resEditors.open(type);/*"image");
        resEditors.open("sound");*/
}
export async function createCompiler(prjdir){
    return (await init()).create(prjdir);
}
export async function main(prj="."){
    prj=this.resolve(prj);
    const ide={
        dir:prj,
        showError(e){
            console.error(e);
        },
    };
    const c=await createCompiler(ide);
    console.log("comp",c);
    window.onTonyuDebuggerReady=d=>{
        d.on("runtimeError",e=>{
            console.log("runt",e.stack.map(s=>s+"").join("\n"));
            ide.showError(e);
        });
        compiler.curDebugger=d;
        d.requestStop=o=>ide.stop(o);
        d.startWithAutoReload=true;
        c.setDebugger(d);
    };
    await c.fullCompile();
    this.echo("compiled");
    let closed;
    prj.watch((t,f)=>{
        if(closed)return ;
        if(f.ext()===".tonyu"){
            c.partialCompile(f);
        }
    });
    
    let w=showIframe("debug.html?prj="+prj.path());
    w.on("close",()=>closed=1);
}