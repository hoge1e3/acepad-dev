//!run
import {loadScriptTag} from "acepad-os";
import {showIframe} from "acepad-widget";
import {$} from "acepad-widget-dialog";
import {equal,ok} from "assert";
import {trial,debugSession} from "acepad-debug";
let compiler;
let ides={
    
};
async function init(){
    if(compiler)return compiler;
    if(typeof requirejs!="function"){
        await loadScriptTag("js/lib/require.js");
    }
    await loadScriptTag("js/reqConf2.js");
    console.log("reqConf2",reqConf);
    reqConf.paths.FS="acepad/FSStub";
    requirejs.config(reqConf);
    window.WebSite={runType:"IDE"};
    const WebSite=await loadScriptTag("WebSite");
    console.log("WS",WebSite);
    let BuilderClient=await loadScriptTag("BuilderClient4Sys");
    const IDEProject=await loadScriptTag("IDEProject");
    const ErrorDialog=await loadScriptTag("ErrorDialog");
    
    let ns2depspec=[
	    {
	        namespace:"kernel", 
	        url: WebSite.compiledKernel/*"Kernel/js/concat.js"*/
	    },
	    {namespace:"mapEditor2", url: WebSite.compiledTools.mapEditor2},
	];
    compiler={
        create(ide){
            const curPrj=IDEProject.create({dir:ide.dir,ide});
            ide.prj=curPrj;
            ide.project=curPrj;
            const c=ide.project.compiler;/*new BuilderClient(curPrj ,{
                worker: {
                    ns2depspec, 
                    url: "BuilderWorker.js"//WORKER_URL
                },
                //locale:R.getLocale()
            });*/
            console.log("idepc",ide.project.compiler);
            ok(ide.project.compiler,"idepc");
            equal(c,ide.project.compiler,"idec2");

            ide.errorDialog=new ErrorDialog(ide);
            return c;
        },
    };
    return compiler;
}

async function resEditor(ide,type){
    const ResEditors=await loadScriptTag("ResEditors");
    const WebSite=await loadScriptTag("WebSite");
    //const EC=await loadScriptTag("exceptionCatcher");
    ide.resEditors=ide.resEditors||new ResEditors(ide.project);
    ide.resEditors.open(type);/*"image");
        resEditors.open("sound");*/
}
export async function createCompiler(prjdir){
    return (await init()).create(prjdir);
}
function runDialog(ide){
    let closed;
    //console.log("watcher",wat);
    
    let w=showIframe("debug.html?prj="+ide.dir.path());
    w.on("close",()=>{
        ide.runDialog=false;
        ide.disconnectDebugger();
    });
    return w;
}
function convert(path, fromSide, toSide) {
    console.log("cvthis",this);
    for (let sides of this.sidesList) {
        console.log("siid",sides,path);
        if (path.startsWith(sides[fromSide])) {
            return sides[toSide] + path.substring(sides[fromSide].length);
        }
    }
    return path;
}
function  conv(err,ide){
    const compiler=ide.project.compiler;
    const fileMap=compiler.fileMap;
    for (let {columnNumber, lineNumber, fileName} of err.stack) {
        console.log(columnNumber, lineNumber, fileName);
        if (!fileName) continue;
        if (typeof columnNumber!=="number") continue;
        if (typeof lineNumber!=="number") continue;
        fileName=convert.call(fileMap,fileName,"remote","local");
        //compiler.convertFromWorkerPath(fileName);
        if (fileName.match(/^http/)) continue; // for concat.js
        console.log("fn",fileName);
        /*try {
            src=FS.get(fileName);
            pos={row:lineNumber, col:columnNumber};
            if (src.exists()) break;
        }catch(e){
            //console.log("ErrorDialog","stack",e);
        }*/
    }
}
export async function main(prj,opt={}){
    //try{
    prj=this.resolve(prj||".");
    const incache=ides[prj.path()];
    const loaded=(!opt.f&&incache);
    if(!loaded&&incache){
        incache.dispose();
    }
    const ide=loaded||{
        dir:prj,
        displayMode(){
            
        },
        showError(e){
            if(!document.querySelector("#errorPos")){
                $("<div>").attr({id:"errorPos"}).appendTo("body");
            }
            console.error(e);
            ide.stop();
            try{
                ide.errorDialog.show(e);
            }catch(_e){
                console.log("err!",_e);
            }
        },
        dispose(){
            if(ide.watcher)ide.watcher.remove();
            if(ide.runDialog)ide.runDialog.close();
        },
        stop(){
            console.log("stopped");
            if(ide.curDebugger){
                ide.curDebugger.stop();
            }
        },
        disconnectDebugger(){
            ide.curDebugger=null;
            c.setDebugger();
        }
    };
    const c=loaded?loaded.project.compiler:
        await createCompiler(ide);
    ides[prj.path()]=ide;
    console.log("ide",ide);
    window.onTonyuDebuggerReady=d=>{
        d.on("runtimeError",trial(e=>{
            
            console.log("runt",e.stack.map(s=>s+"").join("\n"));
            console.log("fileMap",c.fileMap);
            equal(c,ide.project.compiler,"idec");
            conv(e,ide);
            ide.showError(e);
        }));
        ide.curDebugger=d;
        d.requestStop=o=>ide.stop(o);
        d.startWithAutoReload=true;
        c.setDebugger(d);
    };
    if(opt.img){
        return resEditor(ide,"image");
        
    }
    console.log("comp1");
    await c.fullCompile();
    console.log("comp2");
    this.echo("compiled");
    ide.watcher=ide.watcher||prj.watch((t,f)=>{
        if(closed)return ;
        if(f.ext()===".tonyu"){
            c.partialCompile(f);
        }
    });
    if(!ide.runDialog){
        ide.runDialog=runDialog(ide);
    }   else{
        ide.runDialog.show();
    } 
    /*}catch(e){
        console.error(e);
    }*/
}