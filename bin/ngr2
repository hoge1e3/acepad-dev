//!run
/*global $*/
import {Document, DocumentSet} from "@hoge1e3/ngram";
import * as assert from "assert";

const timeout=(t)=>new Promise(s=>setTimeout(s,t));
export async function main(){
    let dir=this.resolve();
    let s=new DocumentSet();

    for(let f of dir.recursive()){
        if(f.ext()!==".js")continue;
        let d=new Document(f.relPath(dir),f.text());
        s.addDocument(d);
    }
    let a=this.$acepad;
    a.events.on("renderModifierState",()=>{
        let e=a.getEditor();
        if(!e)return ;
        if(!e.session)return ;
        predict(e.session);
        predictw(e.session);
    });
    //$("#sug").remove();
    let sugw=$($(".suggest")[0]);
    let sugs=$($(".suggest")[1]);
    
    /*.attr({id:"sug"}).text("sugg").
    css({
        backgroundColor:"#ddd",
        //position:"absolute",
        //bottom:0,left:0,
        zIndex:290000,
    }).//.appendTo(a.getMainEditor().container).
    
    on("touchstart",(e)=>e.preventDefault()).
    on("touchend",(e)=>e.preventDefault());*/
    for(let i=0;i<300000;i++){
        let p=s.expand();
        //sug.text(p);
        if(p<4)break;
        if(i%100==0)await timeout(1);
        if(i%5000==0) s.calcCount();
    }
    s.calcCount();
    //this.echo("ready");
    let caps={"\n":"En",
        " ":"Sp",
        "\t":"Tb",
    };
    function btn(w){
        let b= $("<button>").
            css({
                border:"1px solid black",
            padding:"15px",fontSize:"15px"}).
            attr({"data-text":w}).
            text(caps[w]||w);
        a.initKey(b[0]);
        return b;
    }
    async function predict(session){
        const r=session.getSelection().getRange().start;
        const i=session.doc.positionToIndex(r);
        const d=new Document("p",session.getValue());
        let pr=await s.predict(d,i);
        sugs.empty();
        let c=0;
        for(let [w,_c] of pr){
            let b=btn(w);
            b.appendTo(sugs);
            if(c++>10)break;
        }
    }
    async function predictw(session){
        const r=session.getSelection().getRange().start;
        const i=session.doc.positionToIndex(r);
        const d=new Document("p",session.getValue());
        sugw.empty();
        let c=0;
        let pr=s.predictWord(d,i);
        for(let {post:w} of pr){
            let b=btn(w);
            b.appendTo(sugw);
            if(c++>10)break;
        }
    }
}
