// acepad-mode-shell
export function completer({sh,getContext}){
    return {
        getCompletions(editor, session, pos, prefix, callback) {
            /*const line=editor.session.getLines(pos.row,pos.row+1)[0];
            let picked=stripPrompt(line);
            let c=pos.column-(line.length-picked.length);
            let secondArg=picked.substring(0, c-prefix.length).match(/\s$/);*/
            const sc=(w)=>w.startsWith(prefix)?1000000:10000;
            const ctx=getContext(editor,session,pos,prefix);
            switch(ctx){
            case "file":
                callback(null,(sh.cwd.ls()).map(n=>({
                    caption: n,
                    value: n+" ",
                    score: sc(n),
                    meta: "file"
                })).filter(({score})=>score));
                break;
            case "command":
                let cl=sh.commandList();
                callback(null,cl.map(n=>({
                    caption: n,
                    value: n+" ",
                    score: sc(n),
                    meta: "command"
                })).filter(({score})=>score));
                break;
            }/*
            console.log(
                secondArg,
                picked.substring(0, c-prefix.length)+"|"+
                picked.substring(c-prefix.length, c)+"|"+
                picked.substring(c));
            callback(null,[{
                caption: "word",
                value: "wordinger",
                score: 100000,
                meta: "local"
            }]);  */
        }
    };
}
let Class;
export function setMode(session,{sh,getContext}){
    init();
    session.setMode(new Class({sh,getContext}));
}
export function init(){
    if(Class) return Class;
    let TextMode=window.ace.require("ace/mode/text").Mode;
    Class=function ({sh,getContext}){
        this.completer=completer({
            sh,
            getContext,
        });
    };
    Class.prototype=new TextMode();
    return Class;
}