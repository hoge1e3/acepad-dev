// fs-tester
import { promises as fs } from 'fs';
import * as fsSync from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Helper function to create a directory if it doesn't exist
async function ensureDir(dirPath) {
  try {
    await fs.access(dirPath);
  } catch (error) {
    await fs.mkdir(dirPath, { recursive: true });
  }
}

// Read and write text data
async function textOperations() {
  const filePath = path.join(__dirname, 'example.txt');
  await fs.writeFile(filePath, 'Hello, World!');
  const content = await fs.readFile(filePath, 'utf-8');
  console.log('Text content:', content);
}

// Read and write binary data
async function binaryOperations() {
  const filePath = path.join(__dirname, 'example.bin');
  const buffer = Buffer.from([0x48, 0x65, 0x6c, 0x6c, 0x6f]); // "Hello" in hex
  await fs.writeFile(filePath, buffer);
  const readBuffer = await fs.readFile(filePath);
  console.log('Binary content:', readBuffer.toString('hex'));
}

// Directory listing
async function listDirectory(dirPath) {
  const files = await fs.readdir(dirPath);
  for (const file of files) {
    const stats = await fs.stat(path.join(dirPath, file));
    console.log(`${file}: ${stats.isDirectory() ? 'directory' : 'file'}`);
  }
}

// Read and write file stats
async function statOperations() {
  const filePath = path.join(__dirname, 'example.txt');
  const stats = await fs.stat(filePath);
  console.log('File stats:', stats);

  // Modify timestamps
  const newAtime = new Date();
  const newMtime = new Date();
  await fs.utimes(filePath, newAtime, newMtime);
  
  const updatedStats = await fs.stat(filePath);
  console.log('Updated stats:', updatedStats);
}

// Streaming operations
function streamOperations() {
  const readStream = fsSync.createReadStream(path.join(__dirname, 'example.txt'));
  const writeStream = fsSync.createWriteStream(path.join(__dirname, 'example_copy.txt'));

  readStream.pipe(writeStream);

  readStream.on('end', () => {
    console.log('Streaming operation completed');
  });
}

// Main function to run all operations
async function main() {
  await ensureDir(__dirname);
  await textOperations();
  await binaryOperations();
  await listDirectory(__dirname);
  await statOperations();
  streamOperations();
}

main().catch(console.error);