// acepad-dot-sync
export function find(dir){
    let sync=findDotSyncDir(dir);
    dir=sync.up();

    let info=instance(dir);
    
    const {repof,treef}=info;
    let {name,config}=repof.obj();
    let trdata=treef.obj();
    let lcltree1=trdata.tree;
    let __id__=trdata.__id__;
    return Object.assign(info,{
        name,
        __id__,// local __id__ of prev sync
        lcltree1,//trdata.tree
    });
}
export function instance(dir){
    const sync=dir.rel(".sync/");
    const repof=sync.rel(repon);
    const treef=sync.rel(treen);
    return {
        /*
        name,
        __id__,// local __id__ of prev sync
        //trdata,//local of prev sync
        lcltree1,//trdata.tree
        */

        repof,treef,
        dir,
        sync,
        getExcludes(){
            return [".sync/",...(
                this.getConfig().excludes||[]
            )];
        },
        getLocalTree2(){//local of current
            return this.getDirInfo();
        },
        getLocalTree1(){//local of last commit
            return this.readLocal().tree;
        },
        updateTree(){
            const lc=this.readLocal();
            lc.tree=this.getLocalTree2();
            this.writeLocal(lc);
        },
        getConfig(){
            let {config}=repof.obj();
            return config||{};
        },
        writeRepo(obj){
            repof.obj(obj);
        },
        writeLocal(obj){
            treef.obj(obj);
        },
        readLocal(obj){
            return treef.obj();
        },
        getDirInfo(_dir){
            _dir=_dir||dir;
            return _dir.getDirTree({
                style:"flat-relative",
                excludes:this.getExcludes()
            });
        },
        init({name,__id__,config}){
            if(!sync.exists())sync.mkdir();
            this.writeRepo({
                name,config,
            });
            const tree={};
            this.writeLocal({
                __id__,
                tree,
            });
        },
    };
}
const repon="repo.json";
const treen="tree.json";

export function findDotSyncDir(dir){
    for(let d=dir;d;d=d.up()){
        let s=d.rel(".sync/");
        if(s.exists())return s;
    }
    throw new Error(`.sync not found from ${dir}`);
}
export function conflictFile(f, id) {
    let names=f.name().split(".");
    names[0]+=`(${id.substring(0,8)})`;
    return f.sibling(names.join("."));
}

