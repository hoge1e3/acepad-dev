//!run
import {importModule, loadedModules, resolveEntry} from "petit-node";
import {Class} from "@hoge1e3/recursive-safe";

function p(...args){
    console.log(...args);
}
async function update(pa){
    const dependencies=
    [...await getDepsPkg(pa)].
    reduce((o,f)=>Object.assign(o,toDepSpec(f)),{});
    const pao=pa.obj();
    pao.dependencies=dependencies;
    save(pa,pao);
}
function toDepSpec(pa){
    const pao=pa.obj();
    return {
        [pao.name]:`^${pao.version}`
    };
}
export async function getDepsPkg(pa){
    const pao=pa.obj();
    const m=pa.sibling(pao.main);
    //await importModule(m);
    const depp=new Set();
    const D=Class({
        argKey({args:[f]}){
            return f.path();
        },
        async loop(f){
            for(let e of await getDeps(f)){
                e=e.file;
                p(e.path());
                const pf=belongingPkg(e);
                if(pf.equals(pa))await this.loop(e);
                else depp.add(pf);
            }
        },
    });
    await (new D().loop(m));
    return depp;
}
export function belongingPkg(f){
    f=f.up();
    while(f){
        const p=f.rel("package.json");
        if(p.exists())return p;
        f=f.up();
    }
    return f;
}
async function getDeps(f){
    const m=await (resolveEntry(f).compile());
    const deps=m.dependencies;
    p(f.path(),deps);
    return deps;
}
function save(pkj,pk){
    const t=JSON.stringify(pk,null,4);
    if(pkj.text()!==t){
        pkj.text(t);
    }
}