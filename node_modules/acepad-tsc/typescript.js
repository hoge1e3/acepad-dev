// typescript
import {initTypescript} from "https://unpkg.com/petit-ts/dist/index.js";
import {fs, path, process, require} from "https://unpkg.com/petit-fs/dist/index.js";

import {PathUtil} from "@hoge1e3/fs";
// Mount RAM disk on /tmp/
fs.mountSync("/tmp/","ram");
// Expand typescript lib files to /tmp/ts/
const ts=initTypescript({fs, path, process, require});

// Do compilation
path.joint=function (...paths/*:string[]*/) {
    if (paths.length==0) throw new Error(`empty paths`);
    let res=paths.shift()/* as string*/;
    while(paths.length) {
        res=PathUtil.rel(PathUtil.directorify(res),
            paths.shift()/* as string*/);
    }
    return res;
};
//path.relative=(f,t)=>PathUtil.relPath(t,PathUtil.directorify(f));
export function compileProject(prj){
    return    compileProjectF({ts,fs,path}, prj.path());
}
function compileProjectF({ts,fs,path}, projectPath/*:string*/) {
  // Read configuration from tsconfig.json
  const configPath = ts.findConfigFile(projectPath, ts.sys.fileExists, 'tsconfig.json');
  if (!configPath) {
    throw new Error('Could not find tsconfig.json');
  }

  // Parse the configuration
  const configFile = ts.readConfigFile(configPath, ts.sys.readFile);
  const parsedConfig = ts.parseJsonConfigFileContent(
    configFile.config, 
    ts.sys, 
    path.dirname(configPath)
  );
  console.log("conf",parsedConfig);
  const compilerHost = ts.createCompilerHost(parsedConfig.options);
  // Create the program
  const program = ts.createProgram(parsedConfig.fileNames, parsedConfig.options, compilerHost);

  // Compile
  const emitResult = program.emit();

  // Handle compilation errors
  const diagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
  if (diagnostics.length > 0) {
    const formatHost/*: ts.FormatDiagnosticsHost*/ = {
      getCanonicalFileName: path => path,
      getCurrentDirectory: ts.sys.getCurrentDirectory,
      getNewLine: () => ts.sys.newLine
    };

    const errorMessage = ts.formatDiagnosticsWithColorAndContext(diagnostics, formatHost);
    console.error(errorMessage);
    console.log(diagnostics);
    // Optionally throw an error if you want compilation to fail on any diagnostic
    if (emitResult.emitSkipped) {
      throw new Error('TypeScript compilation failed');
    }
  }

  console.log('Compilation successful!');
  return diagnostics;
}

