// acepad-keypicker
import {EventHandler} from "acepad-events";
import {p} from "@hoge1e3/polyfiller";
export function KeyPicker(){
    const events=new EventHandler();
    const self= p("KeyPicker6",{
        "nolog": true,
        "renderer": p("0.7635424275744196",{
        }),
        getSelectionRange(){
             return self.session.getSelection().getRange();   
        },
        events,
        "commands": p("0.19434715909504496",{
            "commandKeyBinding": p("0.3073784467067351",{
                "enter": p("0.8709777725907069",{
                }),
            }),
        }),
        onTextInput(text) {
            /*    a: string
                at doClick (/jsmod/node_modules/acepad/keyhandler.js:62:20)
                        editor.onTextInput(text);*/
            return events.fire("input",{text});
        },
        "execCommand": p("0.6580650389230234",{
            "__call__": function (a) {
                /*    a: string
                    at exec (/jsmod/node_modules/acepad/command.js:47:22)
                        let t=editor.execCommand(c);*/
                return p("0.344326916966343",{
                });
            },
        }),
        onCommandKey(a, modifier, keyCode) {
            /*    a: []
            b: number
            c: number
                at doClick (/jsmod/node_modules/acepad/keyhandler.js:59:16)
                    editor.onCommandKey({},modifierStateToInt(m), keyCode);*/
            return events.fire("command",{modifier,keyCode});
        },
        "completer": null,
        "getSelectedText": p("0.30621412631619527",{
            __call__(){
                return "";
            }
        }),
        "session": p("0.43807583648094917",{
            "insert": p("0.6878305167556826",{
                "__call__": function (a, b) {
                    /*    a: [row,column]
                    b: string
                        at print (/jsmod/node_modules/acepad/cursor.js:38:13)
                        session.insert(*/
                    throw new Error(`do not print '${b}' to keypicker`); 
                    return p("0.8947776129100662",{
                        
                    });
                },
            }),
            "remove": p("0.8728359586236056",{
            }),
            "doc": p("0.7630350208614127",{
                "positionToIndex": p("0.7169414044899434",{
                    "__call__": function (a) {
                        /*    a: [row,column]
                            at di (/jsmod/bin/ngr2:66:29)
                                const i=session.doc.positionToIndex(r);*/
                        return 0;
                    },
                }),
            }),
            "getSelection": p("0.540311394150123",{
                "__call__": function () {
                    /*    
                        at predict (/jsmod/node_modules/acepad/ngram.js:33:21)
                        const r=session.getSelection().getRange().start;*/
                    return p("0.5956787145034215",{
                        "getRange": p("0.08167220114244356",{
                            "__call__": function () {
                                /*    
                                    at predict (/jsmod/node_modules/acepad/ngram.js:33:36)
                                    const r=session.getSelection().getRange().start;*/
                                return p("0.31437191808784126",{
                                    "start": {row:0,column:0},
                                });
                            },
                        }),
                    });
                },
            }),
            getValue(){
                return "";
            }
        }),
        "name": "0.3742255221047073",
        
    });
    return self;
}