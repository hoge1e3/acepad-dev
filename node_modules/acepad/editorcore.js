import {isMobile} from './platform.js';
import {setEditor,getConfig,
    setCurrentEditor,getCurrentEditor} from './states.js';
import {initKeypad} from '@acepad/keypad';
import {attachAcepadEditConmands} from "./clipboard.js";
import {_doClick} from './keyhandler.js';
import {events} from "./events.js";
//import * as local from "ace-local-commands";
import * as commandP from "@acepad/command-parser";
import * as kstr from "@hoge1e3/key-stream";

var $singleLineEditor = function(el) {
    const ace=window.ace;
    var renderer = new ace.VirtualRenderer(el);
    renderer.$maxLines = 4;
    var editor = new ace.Editor(renderer);

    editor.setHighlightActiveLine(false);
    editor.setShowPrintMargin(false);
    editor.renderer.setShowGutter(false);
    editor.renderer.setHighlightGutterLine(false);

    editor.$mouseHandler.$focusTimeout = 0;
    editor.$highlightTagPending = true;

    return editor;
};
export function input(opt){
    const s=document.createElement("span");
    s.setAttribute("style",`width:200px;height:30px;`);
    s.innerHTML="&nbsp;".repeat(20);
    const e=$singleLineEditor(s);
    return e;
}
export function edit(e,opt){
    const ace=window.ace;
    let editor = e instanceof ace.Editor ? e 
    :ace.edit(e);
    editor.setOptions({
        enableLiveAutocompletion: true,
        scrollPastEnd:0.6,
    });
    editor.setFontSize(15);
    const kd=()=>{
        if(isMobile())selectKeyDevice("s",editor);
        else selectKeyDevice("p",editor);
    };
    kd();
    editor.on("focus",()=>{
        kd();
        setCurrentEditor(editor);
    });
    let {commands}=getConfig();
    commands=commandP.parse(commands);
    for (let k in commands) {
        editor.commands.addCommand(commands[k]);
    }
    //local.init(editor); does in @acepad/session/initSessions
    return editor;
}
export function over(){
//return ;
  //weird workaround
  const d=document.querySelector("#editor-overlay");
  const h=(e)=>0;//console.log("ev",e);
  const passive=false;
  d.addEventListener("touchstart",h,{passive});
  d.addEventListener("touchmove",h,{passive});

}
export function initEditor(editorElement){
    const ace=window.ace;
    window.ace_language_tools=ace.require("ace/ext/language_tools");
    const editor=edit(editorElement);
    setEditor(editor);
    return editor;
}
export function initCore(element){
    initEditor(element.querySelector(".editor"));
    over();
    initKeypad({/*pressHandler:doClick,*/events});
    kstr.addEventListener("down",_doClick);
}
export function selectKeyDevice(ps ,editor){
    //"physical" or "screen"
    if(!editor)editor=getCurrentEditor();
    if(!ps){
        ps=isMobile()?"s":"p";
    }
    if(ps.match(/^s/)){
        editor.textInput.getElement().setAttribute("readonly",true);
        attachAcepadEditConmands(editor);
    }else
    editor.textInput.getElement().removeAttribute("readonly");
}
