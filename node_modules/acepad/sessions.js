import {getMainEditor,getConfig} from './states.js';
import {detachCommands,attachCommands,parseCommands} from './command.js';
import {events} from './events.js';
import {locate,currentLine} from './cursor.js';
import {EventHandler} from "@hoge1e3/events";
export var sessionMap={};
/*global ace*/
export function findSessions(){
    let r=[];
    for(let k in sessionMap)r.push(sessionMap[k]);
    return r;
}
export function findSession(f){
    if(typeof f==="string"){
        let s=sessionMap[f];
        return s;
    }else if(typeof f!=="function"){
        let t=f;
        f=(s,i)=>s===t||i===t;
    }
    for(let k in sessionMap){
        let s=sessionMap[k];
        if(f(s,sessionInfo(s)))return s;
    }
}
export function changeSession(sn,e){
  const editor=e||getMainEditor();
  let s=typeof sn==="string"? sessionMap[sn] : sn.session ? sn.session : sn;
  if(!s)return alert("No such session "+sn);
  const conf=getConfig();
  applyConfig(conf.editor||{}, s);
  editor.setSession(s);
}
export function applyConfig(conf, to) {
  // call to.setXxxx(conf[xxxx]) where xxxx is key of conf
  //console.log("conf",conf);
  for (let k in conf) {
    const setterName = 'set' + k.charAt(0).toUpperCase() + k.slice(1);
    //console.log("conf-k",k,setterName,to[setterName]);
    if (typeof to[setterName] === 'function') {
         to[setterName](conf[k]);
    }
  }
}


export const setSession=changeSession;
export function onChangeSession({editor,oldSession, session}){
  const evt={editor,oldSession, session};
  //console.log("chses",this);
  editor.focus();
  let osi=sessionInfo(oldSession);
  osi.fire("deactivate",evt);
  if(osi.onDeactivated){
      osi.onDeactivated(editor);
  }
  detachCommands(osi.commands,editor);
  let si=sessionInfo(session);
  si.lastOpen=new Date().getTime();
  si.fire("activate",evt);
  if(si.onActivated){
      si.onActivated(editor);
  }
  attachCommands(si.commands,editor);
  events.fire("changeSession",evt);
  setTimeout(()=>configureWorker({},session),500);
}
export function recentInfos(){
    return Object.values(sessionMap).
        sort((a,b)=>
        sessionInfo(b).lastOpen-
        sessionInfo(a).lastOpen
    ).map(sessionInfo);
}
export function createSessionList(){
    createSession({
        type:"sessions",
        onActivated(editor){
            editor.session.setValue(
                recentInfos().map(
                (si)=>si.name).join("\n")
            );
            locate(1,2);
        },
        commands: {
            return() {
                changeSession(currentLine());
            }
        },
    });
}
export function removeSession(session){
    let s=findSession(session);
    if(!s)return false;
    let si=sessionInfo(s);
    let n=si.name;
    si.fire("remove");
    delete sessionMap[n];
    return true;
}
export function createSession(data){
    data.session=data.session||
    ace.createEditSession(data.text||"");
    data.name=data.name||
    data.file&&data.file.name()||
    data.type&&`*${data.type}*`;
    data.type=data.type||"file";
    data.lastOpen=0;
    data.commands=parseCommands(data.commands);
    sessionInfo(data.session,data);
    //data.session.$worker.send("setOptions",{esversion:8});
    // after changing the session
    data.session.on("changeMode", 
    (...a)=>setTimeout(()=>configureWorker(...a),500));
    events.fire("createSession",data);
    sessionMap[data.name]=data.session;
    return data.session;
}
export function configureWorker(e, session) {
    if (session.getMode().$id == "ace/mode/javascript"){
        const {jshint}=getConfig();
        if (session.$worker) {
            session.$worker.send(
                "changeOptions",
                [ jshint||{esversion:11}],
                (...a)=>console.log(a)
            );
        }
    }
}
export var symsi=Symbol();
    
export function sessionInfo(s,data){
    let si;
    if(data){
        si=sessionInfo(s);
        if(data.name){
            delete sessionMap[si.name];
            sessionMap[data.name]=s;
        }
        Object.assign(si,data);
        si.fire("infochanged",si);
        return si;
    }
    si=s[symsi];
    if(si)return si;
    si=s[symsi]={
        session:s,
    };
    EventHandler.attachTo(si);
    return si;
}
export function initSessions(){
    let editor=getMainEditor();
    editor.on("changeSession", (e)=>{
        e.editor=editor;
        onChangeSession(e);
    });
    createSessionList();
}





