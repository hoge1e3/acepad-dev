import {getMainEditor} from './states.js';
export function parseCommands(cmds, prefix="") {
    const res={};
    if(!cmds)return res;
    for (let k of Object.keys(cmds)) {
        let v=cmds[k];
        if(typeof v==="string"){
            const cmd=v;
            v=(editor,...a)=>editor.execCommand(cmd,...a);
        }
        if (typeof v==="function") {
            v={name: prefix+k, bindKey:k, exec:v};
        } else {
            if (!v.name) v.name=prefix+k;
        }
        v.exec=v.exec.bind(this);
        res[k]=v;    
    }
    return res;
}
export function attachCommands(commands,editor=null){
    editor=editor||getMainEditor();
    commands=parseCommands(commands);
    for (let k in commands) {
        //console.log("attachCommand",k,commands[k]);
        editor.commands.addCommand(commands[k]);
    }

}
export function detachCommands(commands,editor=null){
    editor=editor||getMainEditor();
    commands=parseCommands(commands);
    for (let k in commands) {
        //console.log("detachCommand",k,commands[k]);
        editor.commands.removeCommand(commands[k].name);
    }
}