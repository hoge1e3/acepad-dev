import {getMainEditor,getCurrentEditor} from './states.js';
import {writeClipboard,readClipboard} from './clipboard.js';
import {unsetSel} from './editmode.js';
import {post} from "user-gesture";
export function parseCommands(cmds, prefix="") {
    const res={};
    if(!cmds)return res;
    for (let k of Object.keys(cmds)) {
        let v=cmds[k];
        if(typeof v==="string"){
            const cmd=v;
            v=(editor,...a)=>editor.execCommand(cmd,...a);
        }
        if (typeof v==="function") {
            v={name: prefix+k, bindKey:k, exec:v};
        } else {
            if (!v.name) v.name=prefix+k;
        }
        v.exec=v.exec.bind(this);
        res[k]=v;    
    }
    //hoge;
    //console.log(res);
    return res;
}
export function attachCommands(commands,editor=null){
    editor=editor||getMainEditor();
    commands=parseCommands(commands);
    for (let k in commands) {
        //console.log("attachCommand",k,commands[k]);
        editor.commands.addCommand(commands[k]);
    }

}
export function detachCommands(commands,editor=null){
    editor=editor||getMainEditor();
    commands=parseCommands(commands);
    for (let k in commands) {
        //console.log("detachCommand",k,commands[k]);
        editor.commands.removeCommand(commands[k].name);
    }
}
export function attachAcepadEditConmands(editor){
    
    attachCommands({
        "a-cut":{
            bindKey:"ctrl-x",
            exec:()=>post(cut),
        },
        "a-copy":{
            bindKey:"ctrl-c",
            exec:()=>post(copy),
        },
        "a-paste":{
            bindKey:"ctrl-v",
            exec:()=>post(paste),
        },
    },editor);
}
export function exec(c){
    const editor=getCurrentEditor();
    switch(c){
        case "cut":return post(cut);
        case "copy":return post(copy);
        case "paste":return post(paste);
        default:
        let t=editor.execCommand(c);
        return t;
    }
}

export async function cut(){
    const editor=getCurrentEditor();
    try{
        let t= editor.getSelectedText();
        await writeClipboard(t);
        editor.session.remove(
        editor.getSelectionRange());
        unsetSel(editor);
    }catch(e){
        alert(e);
    }
}
export async function copy(){
    const editor=getCurrentEditor();
    try{
        let t= editor.getSelectedText();
        await writeClipboard(t);
        editor.getSelection().clearSelection();
        unsetSel(editor);
    }catch(e){
        alert(e);
    }
}
export async function paste(){
    const editor=getCurrentEditor();
    try{
        let t=await readClipboard();
        editor.insert(t);
        unsetSel(editor);
    }catch(e){
        alert(e);
    }
}