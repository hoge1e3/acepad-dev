import {clone,checkout,commit,init} from "acepad-sync";
import * as assert from "assert";
function mkcd(work){
    this.mkdir(work);
    this.cd(work);
}
const timeout=(t)=>new Promise(s=>setTimeout(s,t));
export async function main(){
    let name=`test-${new Date().getTime()}`;
    let work=this.resolve(`/tmp/synctes-${name}/`);
    mkcd.call(this,work);
    
    mkcd.call(this,"ini/");
    let id1=await inites.call(this,name,work);
    this.echo("id1",id1);
    
    let fix1={
        "a.txt":"abc",
        "b.txt":"def\nghi",
    };
    putFiles(this.cwd,fix1);
    
    let id2=await commit(this.cwd);
    this.echo("id2",id2);
    this.cd("../");
    
    mkcd.call(this,"clo/");
    let id3=await clonetes.call(this,name,work);
    this.echo("id3",id3);
    assert.equal(id2,id3);
    filesEq(this.cwd,fix1);
    this.cd("../");
    
    await fftes.call(this);
    
    let cf=await conftes.call(this);
    this.echo(cf.path());
    
    await deltes.call(this,cf.name());
    this.echo("done");
}
export async function deltes(name) {
    this.echo("delete",name);
    
    this.cd("clo/");
    let ta=this.resolve("a.txt").text();
    let tb=this.resolve("b.txt").text();
    
    await commit(this.cwd);
    this.cd("../ini/");
    await checkout(this.cwd);
    this.rm(name);
    await commit(this.cwd);
    this.cd("../clo/");
    await checkout(this.cwd);
    assert.ok(!this.resolve(name).exists());
    filesEq(this.cwd,{
        "a.txt":ta,
        "b.txt":tb,
    });  
}
export async function conftes() {
    this.echo("conflict");
    
    this.cd("clo/");
    this.resolve("b.txt").text("def\nghi\njkl");
    try{
        await checkout(this.cwd);
    }catch(e){
        assert.equal(e.conflictFiles[0].src.name(),"b.txt");
        return e.conflictFiles[0].dst;
    }finally{
        this.cd("../");
    }
}
export async function fftes(){
    this.echo("fast-forward");
    let newf={
        "a.txt":"abcABC",
        "b.txt":"def\nGHI\njkl",
    };
    this.cd("clo/");
    await timeout(3000);
    this.resolve("a.txt").text(newf["a.txt"]);
    let id4=await commit(this.cwd);
    this.echo("id4",id4);
    this.cd("../");

    this.cd("ini/");
    await timeout(3000);
    this.resolve("b.txt").text(newf["b.txt"]);
    try {
        await commit(this.cwd);
        throw new Error("kowarenai");
    }catch(e) {
        assert.ok((e+"").match(/checkout first/i));
    }
    let id5=await checkout(this.cwd);
    this.echo("id5",id5);
    assert.equal(id4, id5, "id4!=id5");
    filesEq(this.cwd, newf);
    let id6=await commit(this.cwd);
    this.echo("id6",id6);
    this.cd("../");

}
export async function inites(name){
    this.echo("init");
    let id=await init(name,this.cwd);
    let o=this.resolve(".sync/repo.json").obj();
    assert.equal(o.name,name);
    let o2=this.resolve(".sync/tree.json").obj();
    assert.equal(o2.__id__,id);
    return id;
}
export async function clonetes(name){
    this.echo("clone");
    let id=await clone(name, this.cwd);   
    this.echo(id);
    let o=this.resolve(".sync/repo.json").obj();
    assert.equal(o.name,name);
    let o2=this.resolve(".sync/tree.json").obj();
    assert.equal(o2.__id__,id);
    return id;
}

export function putFiles(dir,o){
    for(let k of dir.listFiles()){
        if(k.name()===".sync/")continue;
        k.rm({recursive:true});
    }
    for(let k in o){
        dir.rel(k).text(o[k]);
    }
}
export function filesEq(dir,o){
    for(let k in o){
        assert.equal(dir.rel(k).text(),o[k],dir.rel(k)+
        "\n----\n"+
        dir.rel(k).text()+
        "\n----\n"+
        o[k]);
    }
    for(let k of dir.recursive()){
        if(k.name()===".sync/")continue;
        assert.ok(!(k.relPath(dir) in k),k);
    }

}



