#!run
// @acepad/sketch
import {show} from "@acepad/widget";
import {generator} from "@hoge1e3/dom";
import css from "@acepad/css";
export function main(){
    const dir=this.resolve(this.$sketchbook||
    this.$home+"/sketchbook");
    let newfile=createFilename();//"0000_0000_000000.jpg";
    let filename=newfile;
    const w=show({fullscreen:true});
    w.element.style["background-color"]="gray";
    const t=generator();
    const density=2;
    const bg="#fff";
    let mode="pen";
    const modes=["pen", "erase", "stamp"];
    css(this.resolve("./sketch.css"));
    const cs=[1600,1200];//mul(vps,density);//[width*density,height*density];
    const d=showMenu();

    const vp=(t.div(
        {
            class: "sketch-viewport",
            ontouchstart,
            ontouchmove,
            ontouchend,
        },
        t.div({id:"sketch-stamp-container"},),
        t.div({
            class: "sketch-transformer",
        },t.canvas({
            width:cs[0],
            height:cs[1],
        })))
    );
    w.print(vp);
    //vp.addEventListener("touchstart",()=>console.log("touced"));
    const transformer=vp.querySelector(
        ".sketch-transformer");
    const c=vp.querySelector("canvas");
    
    /*Object.assign(vp.style,{
        left:`${0}px`,
        top:`${0}px`, 
        width:`${vps[0]}px`,
        height:`${vps[1]}px`,
    });*/
    const vpso=vp.getBoundingClientRect();
    const vps=[vpso.width,vpso.height];
    const vpm=mul(vps,0.5);
    
    const ctx=c.getContext("2d");
    const hcs=mul(cs,0.5);
    const cofs=mul(sub(vps,cs),0.5);
    Object.assign(c.style,{
        position:"absolute",
        left:`${cofs[0]}px`,
        top:`${cofs[1]}px`, 
        width:`${cs[0]}px`,
        height:`${cs[1]}px`,
    });
    
    ctx.translate(...hcs);
    ctx.strokeStyle="black";
    load(dir.rel(filename));
    ctx.globalAlpha=0.5;
    function showMenu(){
        //console.log("showMenu",filename);
        return w.print(t.div({
            id:"sketch-menu",
            class:"over-canvas",
        },
        ...modes.map(m=>
        t.button({
            onclick:()=>setMode(m),
            class:mode===m?"selected":"",
        },m)),
        t.span(filename),
        t.button({onclick:prev},"<<"),
        t.button({onclick:next},">>"),
        t.button({onclick:rm},"rm"),
        ));
    }
    function setMode(m){
        mode=m;
        switch(mode){
            case "erase":
            ctx.strokeStyle=bg;
            ctx.lineWidth=50/transform.scale;
            break;
            case "pen":
            ctx.strokeStyle="black";
            ctx.lineWidth=1;
            break;
        }
        if (mode!=="stamp") {
            w.print(t.div({id:"sketch-stamp-container"}));
        }
        showMenu();
    }
    //let px,py;
    let pinch0;
    let transform={scale:1,translate:[0,0]};
    let transform0;
    let tcount=0;
    //let pivot;
    function ontouchstart(e){
        tcount++;
        console.log("ontouchstart",e);
        const vp0=t2vp(e.touches[0]);
        console.log("vp0",vp0);
        if(e.touches.length>1){
            const vp1=t2vp(e.touches[1]);
            pinch0={
                d:dist(vp1,vp0),
                v:mid(vp1,vp0),
            };
            transform0=transform;
            // pinch0.p = transform0^-1 * pinch0.v
            pinch0.p=conv(pinch0.v,transform);
            e.stopPropagation();
            e.preventDefault();
            return ;
        }
        if(mode==="stamp")return handleStamp(e);
        ctx.beginPath();
        const [dx,dy]=conv(vp0,transform);
        ctx.moveTo(dx,dy);
        e.stopPropagation();
        e.preventDefault();
            
        //[px,py]=[x,y];
    }
    function ontouchmove(e){
        const vp0=t2vp(e.touches[0]);
        if(e.touches.length>1&&pinch0){
            const vp1=t2vp(e.touches[1]);
            const pinch={
                d:dist(vp1,vp0),
                v:mid(vp1,vp0)
            };
            const s0=transform0.scale;
            const s=s0*pinch.d/pinch0.d;
            const v=pinch.v;
            const p=pinch0.p;
            /*
            pinch0.p = transform0^-1 * pinch0.v
            pinch0.v = transform0 * pinch0.p

            pinch.p = pinch0.p = transform0^-1 * pinch0.v
                               = transform^-1 * pinch.v
            pinch.v = transform * p   
            v[0]    |s  0 T[0]|   p[0]
            v[1] =  |0  s T[1]|   p[1]
             1      |0  0  1  |    1
            v[0]=s*p[0]+T[0]

            T[0]=v[0]-s*p[0]
            */
            transform={
                scale: s,
                translate: [
                    v[0]-s*p[0],
                    v[1]-s*p[1],
                ]
            };
            transformer.style.transform = trstr(transform);
            e.stopPropagation();
            e.preventDefault();
            return;
        }
        if(pinch0)return ;
        if(mode==="stamp")return handleStamp(e);

        const [dx,dy]=conv(vp0,transform);
        ctx.lineTo(dx,dy);
        ctx.stroke();
        ctx.beginPath();    
        ctx.moveTo(dx,dy);
        e.stopPropagation();
        e.preventDefault();
    }
    function ontouchend(e){
        tcount--;
        console.log("tend",tcount,e.touches);
        //ctx.endPath();
        if(e.touches.length<=0){
            if(!pinch0){
                const stamp=w.element.querySelector("#sketch-stamp");
                if (stamp) {
                    dostamp(stamp);
                }
                save(dir.rel(filename));
            }
            pinch0=null;
            transform0=null;
            if(mode==="erase"){
                ctx.strokeStyle=bg;
                ctx.lineWidth=50/transform.scale;
            }
            if(mode==="stamp")return handleStamp(e);

        }
    }
    let range={};
    function handleStamp(e){
        const o=e.touches[0]&&offset(e.touches[0]);
        if (w.element.querySelector("#sketch-stamp")) {
            return;
        }
        switch(e.type){
            case "touchstart":
                range.lt=o;
                w.print(t.div({
                    id:"sketch-stamp-container",
                },
                t.div({
                    id:"sketch-stamp-range",
                    style:{
                        display:"inline",
                        left:`${o[0]}px`,
                        top:`${o[1]}px`,
                    }
                })));
                break;
            case "touchmove":
                range.wh=sub(o, range.lt);
                w.print(t.div({
                    id:"sketch-stamp-container",
                },
                t.div({
                    id:"sketch-stamp-range",
                    style:{
                        display:"inline",
                        left:`${range.lt[0]}px`,
                        top:`${range.lt[1]}px`,
                        width:`${range.wh[0]}px`,
                        height:`${range.wh[1]}px`,
                    }
                })));
                break;
            case "touchend":
                const stamp=w.print(t.div({
                    id:"sketch-stamp-container",
                },
                t.canvas(tap("sketch-stamp",{
                    id:"sketch-stamp",
                    width:`${range.wh[0]}`,
                    height:`${range.wh[1]}`,
                    style:{
                        left:`${range.lt[0]}px`,
                        top:`${range.lt[1]}px`,
                        width:`${range.wh[0]}px`,
                        height:`${range.wh[1]}px`,
                    }
                })))).querySelector("#sketch-stamp");
                console.log("stamp",stamp);
                const sctx=stamp.getContext("2d");
                const incv=rangeincv(range);
                sctx.drawImage(c,
                ...tap("drawImage",[
                    //incv.lt is middle(0,0)
                    ...add(incv.lt,hcs),
                    ...incv.wh,
                    0,0,...range.wh,
                ]));
                //sctx.fillStyle="black";
                //sctx.fillRect(0,0,30,30);
                break;
        }
        e.stopPropagation();
        e.preventDefault();
    }
    function dostamp(stamp) {
        const incv=rangeincv(range);
        const sctx=stamp.getContext("2d");
        ctx.drawImage(stamp,
            ...tap("dostamp",[
                0,0,range.wh[0],range.wh[1],
                incv.lt[0],incv.lt[1],
                incv.wh[0],incv.wh[1],
        ]));
    }
    function offset(t){
        const rect=vp.getBoundingClientRect();
        const ofs=[rect.left,rect.top];
        return sub([t.clientX,t.clientY],ofs);
    }
    function t2vp(t){
        return sub(offset(t),vpm);
    }
    async function prev(){
        const n=older()||filename;
        console.log("prev",n);
        if(n===filename)return ;
        await load(dir.rel(n));
    }
    function older(){
        const f=files(dir);
        let i=f.indexOf(filename);
        console.log("older",f,filename,i);
        if(i<0)return f[f.length-1]||newfile;
        return f[i-1];
    }
    async function next(){
        const n=newer()||filename;
        if(n===filename)return ;
        await load(dir.rel(n));
    }
    async function rm(){
        if(confirm("del "+filename));
        const n=newer();
        const f=dir.rel(filename);
        if(!f.exists())return ;
        f.rm();
        load(dir.rel(n));
    }
    function newer(){
        const f=files(dir);
        let i=f.indexOf(filename);
        if(i<0)return newfile;
        return f[i+1]||newfile;
    }
    function save(file){
        const d=c.toDataURL('image/jpeg');
        file.dataURL(d);
        filename=file.name();
        showMenu();
        if(filename===newfile){
            newfile=createFilename();
        }
    }
    async function load(file){
        ctx.fillStyle=bg;
        ctx.globalAlpha = 1;
        ctx.clearRect(...mul(hcs,-1),...cs);
        ctx.fillRect(...mul(hcs,-1),...cs);
        ctx.globalAlpha = 0.5;
        filename=file.name();
        showMenu();
        if(!file.exists())return;
        return new Promise(s=>{
            // create img element
            const im = new Image();
            // Ensure the image is loaded before drawing
            im.onload = function () {
                //console.log("im", im.src); // src should be correct
                ctx.globalAlpha = 1;
                ctx.drawImage(im, ...mul(hcs,-1));
                ctx.globalAlpha = 0.5;
                s();
            };
            im.src = file.dataURL();
        });
    }
    function rangeincv(range){
        // range is lefttop=(0,0) while vp is middle=(0,0)
        const ltvp=sub(range.lt,vpm);
        const lt=conv(ltvp,transform);
        const rb=conv(add(ltvp, range.wh),transform);
        const wh=sub(rb,lt);
        return {lt,wh};
    }
}
function trstr(transform){
    const t=`translate(${transform.translate[0]}px,${transform.translate[1]}px)`;
    const s=`scale(${transform.scale})`;
    return t+" "+s;
}
function conv(p,t){
    // returns t^-1 * p 
    return mul(sub(p,t.translate),1/t.scale);
}
function mid(a,b){
    return a.map((v,i)=>((v+b[i])/2));
}
function sub(a,b){
    return a.map((v,i)=>(v-b[i]));
}
function add(a,b){
    return a.map((v,i)=>(v+b[i]));
}
function mul(a,k){
    return a.map(v=>v*k);
}
function dist(a,b){
    const [x,y]=sub(a,b);
    return Math.sqrt(x**2+y**2);
}
function files(dir){
    return [...dir.listFiles()].
    filter(f=>f.ext()===".jpg").sort(
        (a,b)=>a.lastUpdate()-b.lastUpdate()).
        map(f=>f.name());
}
function createFilename() {
    // Get current date and time
    let now = new Date();
    
    // Format components with leading zeros if necessary
    let yyyy = now.getFullYear();
    let MM = String(now.getMonth() + 1).padStart(2, '0'); // Months are 0-based
    let dd = String(now.getDate()).padStart(2, '0');
    let HH = String(now.getHours()).padStart(2, '0');
    let mm = String(now.getMinutes()).padStart(2, '0');
    let ss = String(now.getSeconds()).padStart(2, '0');

    // Construct the filename
    return `${yyyy}_${MM}${dd}_${HH}${mm}${ss}.jpg`;
}

function tap(...a){
    const v=a.pop();a.push(v);
    console.log("sketch-tap",...a);
    return v;
}