import ignore from 'ignore';
import { Ref, CommitEntry, Conflict, GitObject, Hash, ObjectType, Path, RelPath, TreeDiffEntry, TreeEntry, BranchName } from './types.js';
export declare class Repo {
    gitDir: Path;
    constructor(gitDir: Path);
    private getObjectPath;
    readObject(hash: Hash): Promise<GitObject>;
    writeObject(type: ObjectType, content: Buffer): Promise<Hash>;
    readBlobAsText(hash: Hash): Promise<string>;
    readTree(hash: Hash): Promise<TreeEntry[]>;
    encodeTree(entries: TreeEntry[]): Buffer;
    writeTree(entries: TreeEntry[]): Promise<Hash>;
    buildTreeFromWorkingDir(): Promise<TreeEntry[]>;
    readCommit(hash: Hash): Promise<CommitEntry>;
    encodeCommit(entry: CommitEntry): Buffer;
    writeCommit(entry: CommitEntry): Promise<Hash>;
    readHead(ref: Ref): Promise<Hash | null>;
    traverseTree(entries: TreeEntry[], prefix?: string): AsyncGenerator<{
        path: RelPath;
        hash: Hash;
        content?: Buffer;
    }>;
    updateHead(ref: Ref, hash: Hash): Promise<void>;
    findMergeBase(commitHashA: Hash, commitHashB: Hash): Promise<Hash>;
    diffTreeRecursive(oldTree: TreeEntry[], newTree: TreeEntry[], prefix?: string): Promise<TreeDiffEntry[]>;
    threeWayMerge(baseTree: TreeEntry[], aTree: TreeEntry[], bTree: TreeEntry[]): Promise<{
        toA: TreeDiffEntry[];
        toB: TreeDiffEntry[];
        conflicts: Conflict[];
    }>;
    checkoutTreeToDir(treeHash: Hash, dirPath: Path): Promise<void>;
    getCurrentBranchName(): Promise<BranchName>;
    headPath(): string;
    setCurrentBranchName(branch: BranchName): Promise<void>;
    readMergeHead(): Promise<Hash | null>;
    writeMergeHead(commitHash?: Hash): Promise<void>;
    applyDiff(diffs: TreeDiffEntry[]): Promise<void>;
}
export declare class RecursiveGitIgnore {
    stack: {
        dir: Path;
        ig: ignore.Ignore;
    }[];
    ignores(file: Path): boolean;
    push(dir: Path): void;
    pop(): void;
}
