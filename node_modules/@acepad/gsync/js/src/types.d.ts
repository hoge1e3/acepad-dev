declare const SymHash: unique symbol;
export type Config = {
    serverUrl: string;
    repoId: string;
    apiKey?: string;
};
export type State = {
    downloadSince: number;
    uploadSince: number;
};
export type Hash = string & {
    [SymHash]: undefined;
};
export declare function isHash(s: string): s is Hash;
export declare function asHash(s: string): Hash;
export type Mode = "40000" | "100644";
export declare function isMode(s: string): s is Mode;
export declare function asMode(s: string): Mode;
declare const SymPathInRepo: unique symbol;
export type PathInRepo = string & {
    [SymPathInRepo]: undefined;
};
export declare function isPathInRepo(s: string): s is PathInRepo;
declare const SymFilePath: unique symbol;
export type FilePath = string & {
    [SymFilePath]: undefined;
};
export declare function isFilePath(s: string): s is FilePath;
export declare function asFilePath(s: string): FilePath;
export declare function asPathInRepo(s: string): PathInRepo;
declare const SymFilename: unique symbol;
export type Filename = string & {
    [SymFilename]: undefined;
};
export declare function isFilename(s: string): s is Filename;
export declare function asFilename(s: string): Filename;
declare const SymBranch: unique symbol;
export declare function isBranchName(s: string): s is BranchName;
export declare function asBranchName(s: string): BranchName;
export type BranchName = string & {
    [SymBranch]: undefined;
};
declare const SymRef: unique symbol;
export declare function isRef(s: string): s is Ref;
export declare function asRef(s: string): Ref;
export declare function asLocalRef(s: BranchName): Ref;
export type Ref = string & {
    [SymRef]: undefined;
};
export type Conflict = {
    path: PathInRepo;
    base?: Hash;
    a: Hash;
    b: Hash;
};
export type ObjectType = "commit" | "tree" | "blob" | "tag";
export declare function isObjectType(type: string): type is ObjectType;
export type TreeDiffEntry = {
    path: PathInRepo;
} & ({
    type: "added";
    newHash: Hash;
} | {
    type: "modified";
    oldHash: Hash;
    newHash: Hash;
} | {
    type: "deleted";
    oldHash: Hash;
});
export type TreeEntry = {
    mode: Mode;
    name: Filename;
    hash: Hash;
};
export type CommitEntry = {
    tree: Hash;
    parents: Hash[];
    author: Author;
    committer: Author;
    message: string;
};
export declare class Author {
    name: string;
    email: string;
    date: Date;
    constructor(name: string, email: string, date?: Date);
    toString(): string;
    static parse(str: string): Author;
}
export type GitObject = {
    type: ObjectType;
    hash: Hash;
    content: Buffer;
};
export {};
