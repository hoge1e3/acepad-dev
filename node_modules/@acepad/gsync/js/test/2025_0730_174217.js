#!run
import { FileBasedObjectStore,IndexedDBBasedObjectStore} from "../src/objects.js";
export async function main(){
  await testObjectStore_idb(this);
}

function asFilePath(p) {return p;}
async function testObjectStore_idb(sh) {
  const repo=sh.resolve(sh.$home).rel(".gsync");
  const id=repo.rel("remote-conf.json").obj().repoId;
    const s = new FileBasedObjectStore(repo.rel("objects").path());
    const all = [];
    for await (let e of s.iterate(new Date(0))) {
        all.push(e);
    }
    all.sort((a, b) => b.mtime.getTime() - a.mtime.getTime());
    for (let e of all) {
        console.log(e.hash, e.content.byteLength, e.mtime);
    }
    const d = all[10].mtime;
    console.log("----", d);
    for await (let e of s.iterate(d)) {
        console.log("iter", e.hash, e.content.byteLength, e.mtime);
    }
    //return;
    const s2 = new IndexedDBBasedObjectStore("gsync",id);
    s2.put(all[0].hash, all[0].content);
    const c = await s2.get(all[0].hash);
    if (c.byteLength !== all[0].content.byteLength) {
        throw new Error("Not match");
    }
    for (let i = 0; i < c.byteLength; i++) {
        if (c[i] !== all[0].content[i]) {
            throw new Error("Not match " + i);
        }
    }
    console.log(await s2.has(all[0].hash));
    console.log(await s2.has("0cd7fb5fabbf420a4256e6b86b6825d6da2f602c"));
    for await (let e of s2.iterate(new Date(0))) {
        console.log("iter2", e.hash, e.content.byteLength, e.mtime);
    }
}