#!run
// @acepad/filetree
import {show} from "@acepad/widget";
import {generator} from "@hoge1e3/dom";
import css from "@acepad/css";
import {sibling} from "@acepad/here";
const t=generator();
export function main(){
    const w=show("<div>",{width:50});
    const sh=this;
    const expands=new Set();
    css(sibling(import.meta.url,"filetree.css"));
    w.print(t.div({class:"filetree-root",onclick},
        t.ul(
            tree(this.resolve(this.$home)
        )
    )));
    setLevel(w.element);
    function onclick(e){
        const target=e.target;
        if(target.classList.contains("item")){
            const path=target.getAttribute("data-path");
            const f=sh.resolve(path);
            if(f.isDir()){
                if(expands.has(path)){
                    expands.delete(path);
                }else{
                    expands.add(path);
                }
                w.print(tree(f));
                setLevel(w.element);
            }else{
                sh.edit(f,{nomin:true});
            }
        }
        return true;
    }
    function tree(dir){
        //const expand=()=>w.print(tree(dir,!expanded));
        const id=idof(dir);
        const path=dir.path();
        const expanded=expands.has(path);
        let ul=[];
        if(expanded){
            const {dirs,files}=subs(dir);
            ul=t.ul(
                ...dirs.map(tree),
                ...files.map(ftree)
            );
        }
        return t.li({id},
            t.div({
                class:"item dir",
                "data-path":path
            },dir.name()),
            ul,
        );
    }
    function ftree(file){
        const id=idof(file);
        const path=file.path();
        return t.li({id},
            t.div({
                class:"item file",
                "data-path":path,
            },file.name()),
        );
    }
}
function subs(dir){
    let files=[],dirs=[];
    for(let f of dir.listFiles()){
        if(f.isDir())dirs.push(f);
        else files.push(f);
    }
    dirs.sort((a, b) => a.name().localeCompare(b.name()));
    files.sort((a, b) => a.name().localeCompare(b.name()));
    return {dirs,files};
}
function idof(dir){
    return dir.path().replace(/\W/g,"-");
}
function setLevel(element){
    element.querySelectorAll(".item").forEach(it => {
  let depth = 0;
  let parent = it;
  while (true) {
    parent = parent.parentElement.closest("li");
    if (!parent) break;
    depth++;
  }
  it.style.setProperty("--level", depth);
});
}
/*
<ul>
    <li>test</li>
    <li>test2
        <ul>
            <li>test</li>
            <li>test2</li>
        </ul>
    </li>
</ul>=
*/
