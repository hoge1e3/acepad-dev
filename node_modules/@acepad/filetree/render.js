import {t} from "@hoge1e3/dom";
import css from "@acepad/css";
import {sibling,file} from "@acepad/here";
import {update} from "@hoge1e3/dom-updater";
export function render(home,onsel,recs){
    //const element=w.element;
    //const re=recset();
    console.log("recs",...recs);
    const print=(e)=>update(null,e);
    const expands=new Set();
    css(sibling(import.meta.url,"filetree.css"));
    const element=t.div({class:"filetree-root",onclick},
        t.ul(tree(home))
    );
    setLevel(element);
    return element;
    function onclick(e){
        const target=e.target;
        if(target.classList.contains("item")){
            const path=target.getAttribute("data-path");
            const f=file(path);
            
            if(f.isDir()){
                if(expands.has(path)){
                    expands.delete(path);
                }else{
                    expands.add(path);
                }
                print(tree(f));
                setLevel(element);
            }else{
                onsel(f);//sh.edit(f,{nomin:true});
            }
        }
        return true;
    }
    function tree(dir){
        //const expand=()=>w.print(tree(dir,!expanded));
        const id=idof(dir);
        const path=dir.path();
        const expanded=expands.has(path);
        let ul=[];
        if(expanded){
            const {dirs:dirsr,files:filesr}=subs(dir,true);
            const {dirs,files}=subs(dir);
            ul=t.ul(
                ...dirsr.map(tree),
                ...filesr.map(ftree),
                ...dirs.map(tree),
                ...files.map(ftree)
            );
        }
        const r=recs.has(path)?"🗂":"📁";
        return t.li({id},
            t.div({
                class:"item dir",
                "data-path":path
            },r+""+dir.name()),
            ul,
        );
    }
    function ftree(file){
        const id=idof(file);
        const path=file.path();
        const r=recs.has(path)?"✅":"";
        return t.li({id},
            t.div({
                class:"item file",
                "data-path":path,
            },r+"📄"+file.name()),
        );
    }
  function subs(dir,r){
      let files=[],dirs=[];
      const filter=(f)=>{
        const p=f.path();
        return r^!recs.has(p);
      };
      for(let f of dir.listFiles()){
        if(!filter(f))continue;
          if(f.isDir())dirs.push(f);
          else files.push(f);
      }
      dirs.sort((a, b) => a.name().localeCompare(b.name()));
      files.sort((a, b) => a.name().localeCompare(b.name()));
      return {dirs,files};
  }
}
function idof(dir){
    return "filetree_"+dir.path().replace(/\W/g,"_");
}
function setLevel(element){
    element.querySelectorAll(".item").forEach(it => {
  let depth = 0;
  let parent = it;
  while (true) {
    parent = parent.parentElement.closest("li");
    if (!parent) break;
    depth++;
  }
  it.style.setProperty("--level", depth);
});
}
/*
<ul>
    <li>test</li>
    <li>test2
        <ul>
            <li>test</li>
            <li>test2</li>
        </ul>
    </li>
</ul>=
*/
