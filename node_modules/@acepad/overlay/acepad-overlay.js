// acepad-overlay
import * as overlay from "ace-overlay";
import {BoundObject,bind,bounded} from "@hoge1e3/dom-bind";

export function activate(acepad,container,opt={}){
    //const acepad=getDefaultInstance();
    //alert(acepad);
    overlay.activate(container,{
        oncreate({editor}){
            //alert("act");
            acepad.edit(editor);
            acepad.setCurrentEditor(editor);
            //editor.textInput.getElement().setAttribute("readonly",true);
        },
        ondestroy({editor}){
            acepad.setCurrentEditor(
                acepad.getMainEditor());
            
        },
        ...opt,
    });
}
async function loadAce(){
  if(globalThis.ace)return ;
  const url="https://cdn.jsdelivr.net/npm/ace-builds@1.39.0/src-noconflict/ace.js";
  await import(url);
}

export async function iframe(){
  await loadAce();
  const acepad=findAcepadIndtance();
  activate(acepad,document.body,{dynamic:true});
}
export function findAcepadIndtance(acepad){
  if(acepad)return acepad;
  let p=find("pNodeBootLoader");
  acepad=p.getValue("acepad");
  if(!acepad) {
    p=find("pNodeBootLoader",parent());
    acepad=p.getValue("acepad");
  }
  if(!acepad) {
    const _acepad=bounded(
      document.querySelector("#acepad"));
    acepad=_acepad||globalThis.sh.$acepad;
  }
  if(!acepad) {
    throw new Error("acepad instance not found");
  }
  return acepad;
}
export function find(name,g=globalThis){
  for(;g;g=parent(g)){
    try{
      if(g[name])return g[name];
    }catch(e){}
  }
}
export function parent(g=globalThis){
  let r;
  try{
    r=g.parent;
    if(r&&r!==g)return r;
  }catch(e){}
  try{
    r=g.opener;
    if(r&&r!==g)return r;
  }catch(e){}
}