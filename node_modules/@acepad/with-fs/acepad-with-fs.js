// acepad-with-fs
import {open} from "@acepad/browser";
import {trial,debugSession} from "@acepad/debug";
import {showWidget} from "@acepad/widget";
import {initVConsole,showVConsole} from "show-vconsole";
import {run} from "@acepad/find";
import unload from "@hoge1e3/unload";
import {Menu} from "@acepad/menu";
import {openFile,createSessionListWithRecents} from "@acepad/files";
import {init} from "acepad";
import * as fkeys from "@acepad/function-keys";
import {loadScriptTag} from "@hoge1e3/loadScript";
import {wrap} from "@hoge1e3/splashscreen";
import {gen,fix} from "@acepad/genai";
import * as dombind from "@hoge1e3/dom-bind";
/*global $*/
const cdn="https://cdn.jsdelivr.net/npm/";//"https://unpkg.com/"
async function loadScripts(scripts) {
    return Promise.all(scripts.
    map(s=>`${cdn}${s}`).
    map(async (u)=>{
        try{
            //console.log("Loading ",u);
            await loadScriptTag(u);
            //console.log("Loaded ",u);
        }catch(e){
            alert("load fail"+e.message);
        }
    }));
}
export async function main(){
    const sh=this;
    const dirn=sh.resolve(
        import.meta.url
    ).up();
    if (sh.$home){
        const dir_nodem=sh.resolve(sh.$home).rel("node_modules/");
        setPath(sh,dir_nodem);    
    }
    await loadScripts([
"jquery@1.12.1/dist/jquery.min.js",
"vconsole@latest/dist/vconsole.min.js",
"ace-builds@1.39.0/src-noconflict/ace.js",
]);
    await loadScripts([
"ace-builds@1.39.0/src-noconflict/ext-language_tools.js",
    ]);
    console.log("Render HTML");
    await open(dirn.rel("ace.html"));
    const {setForce}=unload({
        oncancel(){
           setTimeout(()=> 
          document.documentElement.requestFullscreen().then(
              ()=>document.exitFullscreen())
        ,100);  
        }
    });
    const acepad=window.acepad=await init();   
    console.log("Render Done");
    sh.$acepad=acepad;
    sh.setenv("ROOT_SHELL",sh);
    dombind.bind(document.querySelector("#acepad"),acepad);
    sh.setenv("ACEPAD_INSTANCE",acepad);
    
    //let {openFile}=await sh.jsm("acepad-files");
    acepad.attachCommands({
        F1:"changeSession",
        F5:"runMenu",
        F7:"dirup",
        F8:"filetree",
        F11:"showConsole",
        F12:"reloadPage",
        "ctrl-g":"toggleGutter",
        "ctrl-9":"toggleFullScreen",
        "ctrl-f":"findFiles",
        
        filetree(){sh.filetree();},
        reloadPage(){location.reload();},
        findFiles(){run(sh);},
        dirup:()=>{
            let si=acepad.sessionInfo(
                acepad.getMainEditor().session);
            if(si.file){
                openFile(sh, si.file.up());
            }
        },
        showConsole:()=>{
            showVConsole();
        },
        toggleGutter:()=>{
            //autogutt disable this
            const editor=acepad.getCurrentEditor();
            //console.log("gutt",editor.renderer.getShowGutter());
            editor.renderer.setShowGutter(
                !editor.renderer.getShowGutter());
        },
        toggleFullScreen() {
          if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen();
          } else if (document.exitFullscreen) {
            document.exitFullscreen();
          }
        },
        changeSession(){
            acepad.changeSession(rs); 
        },
        runMenu(){
            sh.runMenu();
        },
        genAi(){
            gen(sh);
        },
        fixAi(){
            fix(sh);
        },
    });
    setTimeout(initVConsole,1000);
    sh.debugSession=()=>debugSession(sh);
    autogutt(acepad);
    fkeys.show(acepad);
    const rs=createSessionListWithRecents(sh);
    acepad.changeSession(rs);
    sh.keysel(1);
    sh.quota();
    hackTimeouts();
    return acepad;
}
function setPath(sh,nodem){
    sh.addPath(nodem.rel(".bin/").path());
    //sh.addPath(sh.resolve("bin/").path());
}
let prevs;
function autogutt(acepad){
    //!run
    const renderer=acepad.getMainEditor().renderer;
    setInterval( ()=>{
        const g=renderer.getShowGutter();
         if (g&&renderer.getScrollLeft()>50) {
            renderer.setShowGutter(false);
        } else  if (!g&&renderer.getScrollLeft()<1) {
            renderer.setShowGutter(true);
        }
   
    },100);
    
}
function hackTimeouts(){
    for(let k of ["setTimeout","setInterval",
    "clearTimeout","clearInterval",]){
        globalThis[k]=globalThis[k].bind(globalThis);
    }
}
