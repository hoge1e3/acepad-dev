import {setLongtap} from './longtap.js';
import {modifierKeys,addModifierStyle,modifierLocked,
getModifier,setModifier,clearUnlockedShifts,
  modifierButtonPressed,modifierStateToKeyboardEvent,
  currentModifierState,
} from './modifier.js';
export * as modifiers from "./modifier.js";
import {push,modifierState,setTarget,sync} from "@hoge1e3/key-stream";
//import {events} from './events.js';
/*global $*/
//export let _doClick;
let events;
function procChr(e){
    let syms=e.innerText;
    if (syms[0].toLowerCase()!==syms[0].toUpperCase()) {
        syms=syms[0].toLowerCase()+syms[0].toUpperCase()+syms.substring(1);
        $(e).empty().append(
            $("<span>").addClass("mask").addClass("no-shift").text(syms[0])
        ).append(
            $("<span>").addClass("mask").addClass("shift").text(syms[1])
        );
        if (syms[2]) {
            $(e).find(".mask").addClass("no-sym");
            $(e).append(
               $("<span>").addClass("mask").addClass("sym").text(syms[2])
            );
        }
    } else if (syms.length==2){
        $(e).empty().append(
            $("<span>").addClass("mask").addClass("no-sym").text(syms[0])
        ).append(
            $("<span>").addClass("mask").addClass("sym").text(syms[1])
        );
    }
}
export function initKey(b){
    if(b.classList.contains("chr")){
        procChr(b);
    }
    setLongtap(b,{
        start(){
            doClickRender(b);
        },
        autorepeat:b.classList.contains("autorepeat")
    });
    let m=b.getAttribute("data-modifier");
    if(m){
        modifierKeys[m]=1;
    }   
}
export function initKeypad({pressHandler,events:_events}){
  events=_events;
  //  _doClick=pressHandler;
    const k=document.getElementById('keypad');
    trimTextNode(k);
    for(let b of document.querySelectorAll("#keypad button")) {
        initKey(b);
    }
    addModifierStyle();
    justifyAll();

    //console.log()
}
export function hasSym(){
    const s=document.querySelector("[data-modifier='sym']");
    return s&&!isHidden(s);
}
export function justifyAll(){
    $(".justify").each(function (){
        initJustify(this);
    });
}
export function initJustify(e){
    const r=new ResizeObserver((ev)=>{
        justify(e);
    });
    r.observe(e);
    justify(e);
}

export function justify(row){
    if(isHidden(row))return ;
    let r=[...row.childNodes].filter(
        (node)=>
        node.nodeType === Node.ELEMENT_NODE&&
        !isHidden(node)
    );
    let len=r.length;
    let p=Math.floor(1000/len)/10;
    for(let e of r){
        $(e).css({width:p+"%"});
    }
}
export function trimTextNode(container) {
    const nodes = [...container.childNodes];
    for (const node of nodes) {
        if (node.nodeType === Node.TEXT_NODE && node.textContent.trim() === '') {
            container.removeChild(node);
        } else trimTextNode(node);
    }
}
export function isHidden(el) {
    return (el.offsetParent === null);
}
export function getDatas(e,res){
    res=res||{};
    if(!e.attributes)return e;
    for(let a of Array.from(e.attributes)){
        a.name.replace(/^data-(.*)/,
        (_,n)=>{
            res[n]=a.value;
        });
    }
    for(let c of e.childNodes){
        if(isHidden(c))continue;
        if (c.nodeType!==Node.ELEMENT_NODE)continue;
        getDatas(c,res);
    }
    if (!res.command && !res.text && 
    !res.modifier && !res.keycode) res.text=e.innerText;
    return res;
}
export function doClickRender(b) {
    events.fire("keyclick",{b});
     //if(process.env.newkeypad) 
     doClick(b);
     //else     _doClick(b);
    renderModifierState();
}
export function toggleSym(){
    if(!hasSym())return ;
    setModifier("sym",2);
    renderModifierState();
    return ;
}
export function showGuide(b,size=10) {
    if(typeof b==="string"){
        b=textToButton()[b];
    }
    if (!b) return;
    if(isHidden(b))return ;
    const r=b.getBoundingClientRect();
    const res=$("<span>").addClass("guide").appendTo("body");
    res.css({
        left: r.left-size,
        top: r.top-size,
        width: r.width+size*2,
        height: r.height+size,
        zIndex:300001+size,
    });
    res.text(b.innerText);
    res[0].addEventListener("touchstart",(e)=>{
        doClickRender(b);
        res.remove();
        e.preventDefault();
        return false;
    });
    setTimeout(shrink,200);
    function shrink() {
        if (isHidden(res)) return;
        res.css({
            left: r.left-size,
            top: r.top-size,
            width: r.width+size*2,
            height: r.height+size,
        });
        size--;
        if (size>0) setTimeout(shrink,200);
        else res.remove();
    }
    return res;
}
export function textToButton(){
    const res={};
    for(let b of document.querySelectorAll("#keypad button")){
        let d=getDatas(b);
        let t=d.text;
        if(t)res[t]=b;
    }
    return res;
}
export function renderModifierState() {
    for(let m in modifierKeys){
        if(getModifier(m)){
            $("#keypad").addClass(m);
        }else{
            $("#keypad").removeClass(m);
        }
        if(modifierLocked(m)){
            $("#keypad").addClass(`lock-${m}`);
        }else{
            $("#keypad").removeClass(`lock-${m}`);
        }
    }
    events.fire("renderModifierState",{});
    
}
function click(e){
  console.log("click",e);
  push({type:"down",...e});
  push({type:"up",...e});
  
}
export function isArrowKeyCode(keyCode) {
    return keyCode>=37&&keyCode<=40;
}

export function doClick(b) {
  //todo:key-stream
  // called also from acepad.doClick
  // e.g. acepad-function-keys
    //const editor=getCurrentEditor();
    let d=getDatas(b);
    let cmd=d.command;
    let keyCode=d.keycode-0;
    let key=d.key;
    let text=d.text;
    let mod=d.modifier;
    //checkEnterEditMode(editor);
    if (getModifier("ctrl") && d.ctrl) {
      click({key:"ace:"+d.ctrl});
      clearUnlockedShifts();
      sync(modifierStateToKeyboardEvent());
      return;
    }
    if (cmd) {
      click({key:"ace:"+cmd});
      clearUnlockedShifts();
      sync(modifierStateToKeyboardEvent());
      return;
    }
    if (mod) {
      // should not move to keypad, 
      //if there were externally customed modifier keys,
      // doClick may be called directly.
      modifierButtonPressed(d);
      sync(modifierStateToKeyboardEvent());
      return ;
    }
    if(key&&key.match(/^Arrow/)){
        if(getModifier("select")){
          let m=Object.assign({},currentModifierState());
          m.shift=true;
          sync(modifierStateToKeyboardEvent(m));
          click({key});
          m.shift=false;
          sync(modifierStateToKeyboardEvent(m));
          return;
        }
        if(getModifier("shift")){
          setModifier("edit",2);
          setModifier("select",2);
          renderModifierState();
          
        }
    }
    /*if(isArrowKeyCode(keyCode)){
    Shift+left+quit 
    Shift * 4-> "Shift"
        let m=Object.assign({},currentModifierState());
        if(getModifier("select"))m.shift=2;
        editor.onCommandKey({},modifierStateToInt(m), keyCode);
    }*/
    //const comp=editor.completer && editor.completer.activated && editor.completer; 
    //let session=editor.session;
    /*if (keyCode===13) {
        if(!comp&&(
        editor.commands.commandKeyBinding.enter||
        editor.commands.commandKeyBinding.return 
        )){
            editor.onCommandKey(
            {},
            modifierStateToInt(),
            keyCode);
            return ;
        }
        if (comp) editor.onCommandKey(
            {},
            modifierStateToInt(),
            keyCode);
        else editor.onTextInput("\n");
    } else if (keyCode===9) {
        if (comp||selMode(editor)) editor.onCommandKey(
            {},
            modifierStateToInt(),
            keyCode);
        else editor.onTextInput("\t");
    } else if(isArrowKeyCode(keyCode)){
        let m=Object.assign({},currentModifierState());
        if(getModifier("select"))m.shift=2;
        editor.onCommandKey({},modifierStateToInt(m), keyCode);
    } else {
        if (text && !getModifier("ctrl")) {
            editor.onTextInput(text);
        } else {
            if (!keyCode) keyCode=text.toUpperCase().charCodeAt(0); 
            editor.onCommandKey({},modifierStateToInt(), keyCode);
        }
    }*/
    //insertMatchHook(editor);
    if(key){
      click({key});
    }else if(text){
      click({key:text});
    }
    clearUnlockedShifts();
    sync(modifierStateToKeyboardEvent());

    /*scrollToKeypadTop();
    checkEnterEditMode(editor);
    unsetSel(editor);*/
    
}
