// @acepad/installer

export async function install(sh, dst, name) {
    if (!dst) {
        throw new Error("Specify dst");
    }    
    dst=sh.resolve(dst);
    if (dst.exists()) {
        throw new Error(dst+" exists ");
    }
    //await dst.mkdir();
    const b=getBoot(sh);
    /*if(!b.startsWith("/tmp")){
        throw new Error();
    }*/
    await sh.cp(b, dst);
    const menus=getBootMenus(sh);
    if (name && menus[name]) {
        throw new Error(`Boot menu ${name} exists.`);        
    }
    if (!name) name=dst.name().replace(/\/$/,"");
    let basename=name, seq=2;
    while (menus[name]) {
        name=basename+"_"+seq;
        seq++;
    }
    addBootMenu(sh, dst.name(), dst);
}
function p(f){
  return typeof f==="string"?f:f.path();
}
export function bootMenuFile(sh) {
    const rootP=sh.getRoot().rel("package.json");
    return rootP;
}
export function getBootMenus(sh) {
    const rootP=bootMenuFile(sh);
    const o=(rootP.exists()?rootP.obj():{});
    return o.menus||{};
}
export function hasBootMenu(sh,main){
  const menus=getBootMenus(sh);
  for(let k in menus){
    const v=menus[k];
    if(v===p(main))return v;
    if(v?.main===p(main))return v;
  }
}
export function installBootMenu(sh, name, main, opt={}){
  if(hasBootMenu(sh,main))return ;
  addBootMenu(sh,name,main,opt);
  
}
export function addBootMenu(sh, name, main, opt={}){
    const rootP=bootMenuFile(sh);
    const o=(rootP.exists()?rootP.obj():{});
    o.menus=o.menus||{};
    let seq,trunk,c=0;
    const m=/(.*)(\d+)$/.exec(name);
    if (m) {
        seq=m[1]-0;
        trunk=m[0];
    } else {
        trunk=name;
        seq=1;
    }
    while (o.menus[name]) {
        seq++;
        c++;
        if (c>100) break;
        name=trunk+seq;        
    }
    o.menus[name]={
        main:p(main), ...opt
    };
    rootP.obj(o);
}
function getBoot(sh) {
    if (sh.$boot) return sh.$boot;
    if (sh.resolve("/tmp/boot/").exists()) {
        return "/tmp/boot/";
    }
    throw new Error("cannot find boot");
}