// @acepad/installer

export async function install(sh, dst, name) {
    if (!dst) {
        throw new Error("Specify dst");
    }    
    dst=sh.resolve(dst);
    if (dst.exists()) {
        throw new Error(dst+" exists ");
    }
    //await dst.mkdir();
    const b=getBoot(sh);
    /*if(!b.startsWith("/tmp")){
        throw new Error();
    }*/
    await sh.cp(b, dst);
    const menus=getBootMenus(sh);
    if (name && menus[name]) {
        throw new Error(`Boot menu ${name} exists.`);        
    }
    if (!name) name=dst.name().replace(/\/$/,"");
    let basename=name, seq=2;
    while (menus[name]) {
        name=basename+"_"+seq;
        seq++;
    }
    addBootMenu(sh, dst.name(), dst);
}
export function bootMenuFile(sh) {
    const rootP=sh.resolve("/package.json");
    return rootP;
}
export function getBootMenus(sh) {
    const rootP=bootMenuFile(sh);
    const o=(rootP.exists()?rootP.obj():{});
    return o.menus||{};
}
export function addBootMenu(sh, name, main, auto=false){
    const rootP=bootMenuFile(sh);
    const o=(rootP.exists()?rootP.obj():{});
    o.menus=o.menus||{};
    o.menus[name]={
        main:main.path(), auto  
    };
    rootP.obj(o);
}
function getBoot(sh) {
    if (sh.$boot) return sh.$boot;
    if (sh.resolve("/tmp/boot/").exists()) {
        return "/tmp/boot/";
    }
    throw new Error("cannot find boot");
}