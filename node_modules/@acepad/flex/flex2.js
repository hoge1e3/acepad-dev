#!run
// @acepad/flex
//import { Index, Document } from "https://cdn.jsdelivr.net/gh/nextapps-de/flexsearch@0.8.1/dist/flexsearch.light.module.min.js";
import * as path from "path";
import {file,dir} from "@acepad/here";
import {sleep} from "@hoge1e3/timeout";
import {t} from "@hoge1e3/dom";
import {ref} from "@hoge1e3/ref";
import {show} from "@acepad/widget";
import {Sym_src,Sym_dst} from "@hoge1e3/dom-updater";
import css from "@acepad/css"; 
import {overlay,sym_editor} from "ace-overlay";
import {current as curfile} from "@acepad/files";
//import { Index, Document,IndexedDB } from "https://cdn.jsdelivr.net/gh/nextapps-de/flexsearch@0.8.2/dist/flexsearch.bundle.module.min.js";
import {init,search,addDir} from "./flex-worker-client.js";
export {init,search,addDir} from "./flex-worker-client.js";
import {initMarker} from "./marker.js";

function text(f){
  if(f.isDir()){
    return f.ls().join("\n");
  }else return f.text();
}

//"https://cdn.jsdelivr.net/gh/nextapps-de/flexsearch@0.8.2/dist/flexsearch.compact.module.min.js";
function refInput(r,attr={}){
  const id=attr.id;
  if(!id)throw new Error(" refInput requires id");
  //const id=attr.id||(Math.random()+"").replace(/\D/g,"");
  const d=t.input({
    ...attr,
    value:r.value,
    oninput(){
      r.value=this.value;
    }
  });
  if(!r[id]){
    r.on("change",()=>
    document.getElementById(id).value=r.value);
    r[id]=1;
  }
  return d;
}
const sw="symbol@acepad/flex";
export async function main(opt={}){
  const sh=this;
  if(opt.a){
    addDir(typeof opt.a==="string"?
      opt.a:
      sh.resolve("./").path());
    return ;
  }
  let acepad=sh.$acepad;
  let editor=acepad.getMainEditor();
  const sel=editor.getSelectedText()||"";  
  if(globalThis[sw]){
    globalThis[sw].show(sel);
    return ;
  }
  const id="flexfinder";
  const already=document.getElementById(id);
  if(already){
    already.parentNode.removeChild(already);
  }
  init(sh);
  css(dir(import.meta.url).rel("flex.css"));
  let w=show(
    {overlay:true,width:70,buttons:[
        //{command:"close",caption:"x"},
        {command:"minify",caption:"_"},
    ],noMenu:true}
  );
  globalThis[sw]={
    show(word){
      w.show();
      if(q.value==="")q.value=word;
      focus();
      dosearch();
    }
  };
  const q=ref(sel);
  initMarker(editor,q);

  //let indexed;
  let searching;
  let  r=[];
  function refresh(r){
    //r:{file:string,lines:{row:number}[]}
    let c=0;
    const cf=curfile(sh);
    w.print(t.div({id},
      t.div(
        refInput(q,{id:"flexq",placeholder:"find"}),
      ),
      t.h1(q.value),
      t.div(searching?"searching ":""),
      t.div({class:"result"},
      ...r.map(s=>{
        const f=file(s.file);
        if(!f.exists())return [];
        //if(f.isDir())return [];
        //if(c>50)return [];
        
        const lines=highlight(f,q.value,s.lines);
        if(lines.length==0)return [];
        c+=lines.length;
        return t.div(...lines);
      })),
    ));
  }
  function highlight(f, word,lines) {
    const tx=text(f).split("\n");
    const result = [];
    for (const {row} of lines) {
      const line=tx[row];
      const parts = line.split(word);
      const children = [];

      for (let i = 0; i < parts.length; i++) {
        children.push(parts[i]);
        if (i < parts.length - 1) {
          children.push(t.span({ class: "highlight" }, word));
        }
      }
      result.push(t.div({
        onclick(){
          sh.edit(f,{row:row+1,nomin:1,column:1});
        }
      },t.span({
        class: "filename"
      },`${f.name()}:${row+1}`),...children));
    }
    return result;
  }
  const dosearch=async ()=>{
    try{
      if(q.value==="")return ;
      const qq=q.value;
      const r=[];
      searching=true;
      let last=performance.now();
      for await (let e of search(q.value, curfile(sh))){
        r.push(e);
        if(performance.now()-last>500){
          refresh(r);
          await sleep(3);
          last=performance.now();
        }
        if(r.length>=50)break;
        if(qq!==q.value)break;
      }
      searching=false;
      refresh(r);
    }catch(e){
      console.error(e);
    }
  };//todo extract vars
  q.on("change",dosearch);
  if(q.value)dosearch();
  refresh([]);
  function focus(){
    const i=document.querySelector("#flexq");
    setTimeout(()=>
    i.dispatchEvent(
      new Event("click")),100);
    setTimeout(()=>
    i[sym_editor].selectAll(),200);
      
  }
  focus();
  ///uoverlay(document.querySelector("#flexq"));
  //await index.clear();
  //refresh([]);
  //ok reload on re-shown
  return;
}
