import * as flex from "@acepad/flex";
import * as assert from "assert";
import {createProxy} from "@acepad/worker";
import {sibling} from "@acepad/here";
import {sleep} from "@hoge1e3/timeout";
const et=new EventTarget();
const p=await createProxy(
  sibling(import.meta.url,"flex-worker.js"),{
  send(query,result){
    et.dispatchEvent(Object.assign(
      new Event("progress"),{
        query, result
      }));
  }
});
let inited;
p.initDb(this.$home).then(()=>inited=true);
export async function* search(q,base){
  if(inited){
    for(let e of await p.main(q,base.path())){
      yield e;
    }
    return;
  }
  const f=new Set();
  const queue=[];
  let end;
  function enqueue(result){
    for(let r of result){
      if(f.has(r.file))continue;
      f.add(r.file);
      queue.unshift(r);
    }
  }
  function* dequeue(){
    while(queue.length)yield queue.pop();
  }
  function prg(e){
    console.log("prg",e.query,e.result);
    if(e.query!==q)return ;
    enqueue(e.result);
  }
  et.addEventListener("progress",prg);
  p.main(q,base.path()).then((result)=>{
    enqueue(result);
    end=true;
  },(e)=>end=e);
  while(!end){
    await sleep(100);
    yield* dequeue();
  }
  et.removeEventListener("progress",prg);
  if(end!==true)throw end;
} 
