//!run
import {ESModuleCompiler, importModule, loadedModules, resolveEntry} from "petit-node";
import {file} from "@acepad/here";
import {traverse} from "@hoge1e3/dependencies";
import {KeySet} from "@hoge1e3/keyset";
function p(...args){
    console.log(...args);
}
export async function update(pa){
    pa=toPkg(pa);
    const dependencies=
    [...await getDepsPkg(pa)].
    reduce((o,f)=>Object.assign(o,toDepSpec(f)),{});
    const pao=pa.obj();
    pao.dependencies=dependencies;
    save(pa,pao);
}
function toDepSpec(pa){
    if (typeof pa==="string") {
        if (pa.startsWith("/")) pa=file(pa);
        else {
            // Must be built-in
            return {
                [pa]: "^1.0.0",
            }
        }
    }
    const pao=pa.obj();
    return {
        [pao.name]:`^${pao.version}`
    };
}
export function toPkg(f){
    if(f.name()==="package.json")return f;
    return belongingPkg(f);
}
export async function getDepsPkg(pa,recusive=false){
    if (typeof pa==="string") {
        if (pa.startsWith("/")) pa=file(pa);
        else {
            // Must be built-in
            return new Set();
        }
    }
    pa=toPkg(pa);
    const pao=pa.obj();
    if(recusive){
        return await traverse(pa,async (f)=>
            await getDepsPkg(f));
    }
    const m=pa.sibling(pao.main);
    const infiles=await traverse(m,
        async (f)=>
            (await getDepsMod(f)).
            filter(m=>m.entry).
            map(m=>m.entry.file).
            filter((f)=>
                belongingPkg(f).equals(pa)));
    infiles.add(m);
    console.log("infiles",...infiles);
    const depp=new Set();//KeySet((f)=>f.path());
    for(let f of infiles){
        for(let m of await getDepsMod(f)){
            if(!m.entry) {
                depp.add(m.path);
            } else {
                depp.add(belongingPkg(m.entry.file).path());
            }
        }
    }
    depp.delete(pa.path());
    return depp;
}
export function belongingPkg(f){
    f=f.isDir()?f:f.up();
    while(f){
        const p=f.rel("package.json");
        if(p.exists())return p;
        f=f.up();
    }
    return f;
}
async function getDepsMod(f){
    const compiler=ESModuleCompiler.create();
    const m=await (compiler.compile(resolveEntry(f)));
    const deps=m.dependencies;
    p(f.path(),deps);
    return deps;
}
function save(pkj,pk){
    const t=JSON.stringify(pk,null,4);
    if(pkj.text()!==t){
        pkj.text(t);
    }
}