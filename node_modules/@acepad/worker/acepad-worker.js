// acepad-worker
import * as npm from "@acepad/npm";
import * as sw from "@hoge1e3/str2worker";
import * as rpc from 
    "https://unpkg.com/@hoge1e3/rpc@latest/dist/index.js";
import * as cons from "./console.js";
import {sibling} from "@acepad/here";
export * as cons from "./console.js";
const em=(d)=>JSON.stringify(d);
async function createFixture(rpa){
    const deps=await npm.getDeps(rpa,true);
    deps.add(rpa);
    const data={};
    for(let pa of deps){
        pa=pa.up();
        for(let f of pa.recursive()){
            data[f.path()]=f.text();
        }
    }
    return data;
}
function header(){
    const purl=process.env.PNODE_URL||"https://unpkg.com/petit-node@latest/dist/index.js";
    return `import pNode from ${em(purl)};
function loadFixture(FS,fixture) {
    for (let name in fixture) {
        const f=FS.get(name);
        f.text(fixture[name]);
    }
}
`;
}
function rpcHeader(){
    return `import * as rpc from 
    "https://unpkg.com/@hoge1e3/rpc@latest/dist/index.js";
`;
}
function hackTimeouts(){
    for(let k of ["setTimeout","setInterval",
    "clearTimeout","clearInterval",]){
        globalThis[k]=globalThis[k].bind(globalThis);
    }
}

export async function createProxy(main){
    /*const rpa=npm.findPackageJson(f);
    const main=rpa.sibling(rpa.obj().main);*/
    const fixture={};//await createFixture(rpa);
    const consolePath=sibling(
        import.meta.url,"console.js").
        resolveLink().path();
    const src=`
${rpcHeader()}
${header()}
(${hackTimeouts})();
const fixture=${em(fixture)};
await pNode.boot({
    async init({FS}){
        try{
            //loadFixture(FS, fixture);
            await FS.mountAsync("/idb/","idb");
            const main=FS.get(${em(main.path())});
            const mod=await pNode.importModule(main);
            const srv={};
            for(let k in mod){
                let v=mod[k];
                if(typeof v==="function"){
                    srv[k]=v;
                }
            }
            rpc.proxy.server("default",[],srv);
            const cons=await pNode.import(FS.get(${em(consolePath)}));
            cons.client();
        }catch(e){
            console.error(e);
            self.postMessage(e.stack);
            throw e;
        }
    },
});
`;
    console.log("worker-gen",src);
    const w=sw.create(src);
    cons.server(w);
    return rpc.proxy.client(w,"default");

    
}
export async function create(main){
    const src=`
${header()}
await pNode.boot({
    async init({FS}){
        return FS.get(${em(main.path())});
    },
});
`;
    console.log(src);
    const w=sw.create(src);
    return w;
    
}