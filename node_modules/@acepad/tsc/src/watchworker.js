#!run 
//import * as ts from "typescript";
import {main as loadTS} from "./mount-idb.js";
export async function main(path) {
    const ts=await loadTS();
    const formatHost = {
        getCanonicalFileName: path => path,
        getCurrentDirectory: ts.sys.getCurrentDirectory,
        getNewLine: () => ts.sys.newLine
    };
    var _a;
    process.chdir(path);
    console.log("cwd",process.cwd());
    const configPath = ts.findConfigFile(
    /*searchPath*/ "./", ts.sys.fileExists, "tsconfig.json");
    if (!configPath) {
        throw new Error("Could not find a valid 'tsconfig.json'.");
    }
    // TypeScript can use several different program creation "strategies":
    //  * ts.createEmitAndSemanticDiagnosticsBuilderProgram,
    //  * ts.createSemanticDiagnosticsBuilderProgram
    //  * ts.createAbstractBuilder
    // The first two produce "builder programs". These use an incremental strategy
    // to only re-check and emit files whose contents may have changed, or whose
    // dependencies may have changes which may impact change the result of prior
    // type-check and emit.
    // The last uses an ordinary program which does a full type check after every
    // change.
    // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and
    // `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.
    // For pure type-checking scenarios, or when another tool/process handles emit,
    // using `createSemanticDiagnosticsBuilderProgram` may be more desirable.
    console.log("c1", configPath);
    const createProgram = ts.createSemanticDiagnosticsBuilderProgram.bind(ts);
    // Note that there is another overload for `createWatchCompilerHost` that takes
    // a set of root files.
    const host = ts.createWatchCompilerHost(configPath, {}, ts.sys, createProgram, reportDiagnostic, reportWatchStatusChanged);
    console.log("c2", host);
    // You can technically override any given hook on the host, though you probably
    // don't need to.
    // Note that we're assuming `origCreateProgram` and `origPostProgramCreate`
    // doesn't use `this` at all.
    const origCreateProgram = host.createProgram.bind(host);
    //error: A spread argument must either have a tuple type or be passed to a rest parameter.
    host.createProgram = (...a
    /*rootNames: ReadonlyArray<string>,
    options, host, oldProgram*/ ) => {
        console.log("** We're about to create the program! **");
        return origCreateProgram(...a
        /*rootNames, options, host, oldProgram*/ );
    };
    const origPostProgramCreate = (_a = host.afterProgramCreate) === null || _a === void 0 ? void 0 : _a.bind(host);
    host.afterProgramCreate = program => {
        console.log("** We finished making the program! **");
        if (origPostProgramCreate)
            origPostProgramCreate(program);
    };
    // `createWatchProgram` creates an initial program, watches files, and updates
    // the program over time.
    console.log("c3");
    ts.createWatchProgram(host);

    function reportDiagnostic(diagnostic) {
        console.error("Error", diagnostic.code, ":", ts.flattenDiagnosticMessageText(diagnostic.messageText, formatHost.getNewLine()));
    }
    /**
     * Prints a diagnostic every time the watch status changes.
     * This is mainly for messages like "Starting compilation" or "Compilation completed".
     */
    function reportWatchStatusChanged(diagnostic) {
        console.info(ts.formatDiagnostic(diagnostic, formatHost));
    }
//watchMain();
}