// typescript

import {require, FS} from "petit-node";
import * as path from "path";
import {wrap} from "@acepad/splashscreen";
import {dir} from "@acepad/here";
async function extract() {
    async function unzip(zipurl,dst) {
        const r=await fetch(zipurl);
        const a=await r.arrayBuffer();
        const zipn=tmp.rel(zipurl.replace(/[^\w\d]/g,"_")+".zip");
        zipn.setBytes(a);
        await FS.zip.unzip(zipn, dst,{v:1});
    }
    const here=dir(import.meta.url);
    let ts;
    try {
      ts=require("typescript", here);
    } catch(e) {
      const tmp=FS.get("/tmp/ts/");
      tmp.mkdir();
      const ndm=tmp.rel("node_modules/");
      if (!ndm.exists()){
        await unzip("https://cdn.jsdelivr.net/npm/petit-ts@1.0.4/dist/node_modules.zip", ndm);
      }
      ts=require("typescript",ndm);
      const ln=FS.get("/node_modules/");
      if (ln.isLink()) ln.rm();
      ln.link(ndm);
    }
    // tsc does not see NODE_PATH
    return ts;
}
const ts=await wrap(extract,"loading tsc")();
export function compileProject(prj){
    return wrap(compileProjectF,"tsc running")(/*{ts,fs,path},*/ prj.path());
}
async function compileProjectF(/*{ts,fs,path},*/ projectPath/*:string*/) {
  // Read configuration from tsconfig.json
  process.chdir(projectPath);
  const configPath = ts.findConfigFile(projectPath, ts.sys.fileExists, 'tsconfig.json');
  if (!configPath) {
    throw new Error('Could not find tsconfig.json');
  }

  // Parse the configuration
  const configFile = ts.readConfigFile(configPath, ts.sys.readFile);
  const parsedConfig = ts.parseJsonConfigFileContent(
    configFile.config, 
    ts.sys, 
    path.dirname(configPath)
  );
  console.log("conf",parsedConfig);
  const compilerHost = ts.createCompilerHost(parsedConfig.options);
  // Create the program
  const program = ts.createProgram(parsedConfig.fileNames, parsedConfig.options, compilerHost);

  // Compile
  const emitResult = program.emit();
  console.log("emitResult",emitResult);
  // Handle compilation errors
  const diagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
  if (diagnostics.length > 0) {
    const formatHost/*: ts.FormatDiagnosticsHost*/ = {
      getCanonicalFileName: path => path,
      getCurrentDirectory: ts.sys.getCurrentDirectory,
      getNewLine: () => ts.sys.newLine
    };

    const errorMessage = ts.formatDiagnosticsWithColorAndContext(diagnostics, formatHost);
    console.error(errorMessage);
    console.log(diagnostics);
    // Optionally throw an error if you want compilation to fail on any diagnostic
    if (emitResult.emitSkipped) {
      throw new Error('TypeScript compilation failed');
    }
  }

  console.log('Compilation successful!');
  return diagnostics;
}

