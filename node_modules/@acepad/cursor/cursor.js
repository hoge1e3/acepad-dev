// @acepad/cursor
export function currentLine(...a) {
    const session=parseSession(a);
    let r=session.getSelection().
    getRange().start.row;
    let line=session.doc.getLine(r);
    if(typeof a[0]==="string"){
      const range={
        start:{row:r,column:0},
        end:{row:r,column:line.length}
      };
      line=a[0];
      session.doc.replace(range,line);
      //locate()
    }
    return line;
}
export function lineAt(...a){
  const session=parseSession(a);
  const row=a.shift();
  let line=session.doc.getLine(row);
  if(typeof a[0]==="string"){
    const range={
      start:{row,column:0},
      end:{row,column:line.length}
    };
    line=a[0];
    session.doc.replace(range,line);
  }
  return line;
}
export function feed(...a){
  const session=parseSession(a);
  const lines=a;
  const row=locate.get(session).row+1;
  session.doc.insertFullLines(row,lines);
  locate(session, -1,row);
}
export function goTop(...a){
    const session=parseSession(a);
    let s=session.getSelection();
    s.moveCursorFileStart();
    s.clearSelection();
}
export function goBottom(...a){
    const session=parseSession(a);
    let s=session.getSelection();
    s.moveCursorFileEnd();
    s.clearSelection();
}
export function goLineEnd(...a){
    const session=parseSession(a);
    let s=session.getSelection();
    s.moveCursorLineEnd();
    s.clearSelection();
}
function isEditor(s){
    return s instanceof window.ace.Editor;
}
function isSession(s){
    return s instanceof window.ace.EditSession;
}
function parseSession(a){
    const s=a.shift();
    if (isSession(s)) return s;
    if (isEditor(s)) return s.session;
    //console.log("parseSession",s, a);
    throw new Error("1st arg should be Editor or EditSession.");
}
export function print(...a){
    const session=parseSession(a);
    session.replace(session.getSelection().getRange(),
    a.join(" "));
}
export function fixNegative(doc,pos){
  if(pos.row<0) {
    pos.row+=doc.$lines.length;
  }
  if(pos.column<0){
    pos.column+=doc.getLine(pos.row).length+1;
  }
}
export function locate(...a){
    const session=parseSession(a);
    const doc=session.doc;
    let [x,y,dx,dy]=a;
    let start={
        row: y, column:x
    };
    let end=
      typeof dx==="number"&&
      typeof dy==="number"?{
        row:dy, column:dx,
      }:start;
    let d=locate.get(session);
    if(typeof start.row!="number"){
        start.row=d.row;
    }
    if(typeof start.column!="number"){
        start.column=d.column;
    }
    fixNegative(doc,end);
    fixNegative(doc,start);
    session.getSelection().
        setRange({
            start,end
        });
}
export function getLocation(...a){
    const session=parseSession(a);
    let r=session.getSelection().
    getRange().start;
    return  r;
}
export function saveCursor(...a){
    const session=parseSession(a);
    let f=a.shift();
    let sv=locate.get(session);
    f();
    locate(session,sv.column,sv.row);
}
locate.get=getLocation;
locate.save=saveCursor;
locate.bottom=goBottom;
locate.lineEnd=goLineEnd;

