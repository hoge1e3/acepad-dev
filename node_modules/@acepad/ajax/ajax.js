

export function get(url, data = {}) {
  const query = new URLSearchParams(data);
    return promise(fetch(url+"?"+query),arguments);/* {
        method: 'GET',
        ...options
    }), [url, options]);*/
}

export function post(url, data = {}) {
  const query = new URLSearchParams(data);
    return promise(fetch(url, {
      method: 'POST',
      headers: {
          "Content-Type": "application/x-www-form-urlencoded"
      },
      body: query,
    }), arguments);
}

export function promise2(p, args) {
    return new Promise((resolve, reject) => {
        p.then(async (res) => {
            if (!res.ok) {
                const errText = await res.text();
                return w(reject, args)(new ResponseError(errText, res));
            }
            const contentType = res.headers.get("Content-Type") || "";
            if (contentType.includes("application/json")) {
                resolve(await res.json());
            } else {
                resolve(await res.text());
            }
        }).catch(w(reject, args));
    });
}
export function promise(p,args){
    return new Promise((s,e)=>{
        p.then(async (r)=>{
          console.log("ajax ",args,r,);
          //r=r.responseText()
          try{
            s(JSON.parse(await r.text()));  
          }catch(e){w(e,args);}
        },w(e,args));    
    });
}


function w(reject, args) {
    return function (e) {
        console.log("args", args);
        reject(e);
    };
}

// Custom error type to include response
class ResponseError extends Error {
    constructor(message, response) {
        super(message);
        this.response = response;
    }
}
