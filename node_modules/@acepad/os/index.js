/*global globalThis*/
import {loadedModules} from "petit-node";
import {} from "./loadModule.js";
const o=globalThis.FS.os;
export const createModuleURL=o.createModuleURL;
export const loadModule=o.loadModule;
export const importModule=o.importModule;

export const FS=globalThis.FS;
let _convertRequired;
function convertRequired() {
    if (typeof _convertRequired==="boolean")return _convertRequired;
    const mesg="this is test message";
    try {
        throw new Error(mesg);
    } catch(e) {
        if (e.stack.includes(mesg)) {
            _convertRequired=false;
        } else {
            _convertRequired=true;
        }
    }
}

export const convertStack=(e, force=false)=>{
    if (!force && !convertRequired()) return e;
    if(!e) return e;
    if (typeof e.stack!=="string") return e;
    for (let m of loadedModules()) {
        if (!m.url)continue;
        let i=e.stack.indexOf(m.url);
        if (i<0) continue;
        e.stack=e.stack.substring(0,i)+
        (m.entry?"file://":"")+m.path+e.stack.substring(i+m.url.length);
    }
    e.stack=e.message+"\n"+e.stack;
    return e;
};    
export const resolveModule=o.resolveModule;
function _urlToPath(url){
    let e=globalThis.urls.get({url});
    return e && e.path;
}
FS.os.urlToPath=FS.os.urlToPath||_urlToPath;
export const urlToPath=FS.os.urlToPath;

export function loadScriptTag(url,attr={}){
/*global define,requirejs*/
    if (attr.type!=="module" && 
        typeof define==="function" && 
        define.amd && 
        typeof requirejs==="function") {
        return new Promise(
            (s)=>requirejs([url],(r)=>s(r)));
    }
    const script = document.createElement('script');
    script.src = url;
    for(let k in attr){
        script.setAttribute(k,attr[k]);
    }
    return new Promise(
        function (resolve,reject){
            script.addEventListener("load",resolve);
            script.addEventListener("error",reject);
            document.head.appendChild(script);
    });
}
