
const editor2globals=new WeakMap();
const session2locals=new WeakMap();
export function init(editor) {
    if (editor2globals.has(editor)) return;
    getGlobalCommands(editor);
    editor.on("changeSession",({oldSession,session})=>{
        console.log("change",oldSession,session);
        disableLocalCommands(editor, oldSession);
        restoreLocalCommands(editor, session);
    });
}
function getGlobalCommands(editor) {
    if (!editor2globals.has(editor)) {
        editor2globals.set(editor, {});
    }
    const globalCommands=editor2globals.get(editor);
    return globalCommands;
}
function getLocalCommands(session) {
    if (!session2locals.has(session)) {
        session2locals.set(session, {});
    }
    const localCommands=session2locals.get(session);
    return localCommands;
}
export function addGlobalCommands(editor, commands) {
    init(editor);
    const globalCommands=getGlobalCommands(editor);
    Object.assign(globalCommands,commands);
    editor.commands.addCommands(commands);
}
export function removeGlobalCommands(editor, commands) {
    init(editor);
    disableLocalCommands(editor);
    const globalCommands=getGlobalCommands(editor);
    for (let k in commands) {
        delete globalCommands[k];
    }
    editor.commands.removeCommands(commands);
    restoreLocalCommands(editor);
}
export function addCommandsToSession(session, commands){
    const localCommands=getLocalCommands(session);
    Object.assign(localCommands, commands);
}
export function addLocalCommands(editor, commands) {
    init(editor);
    const session=editor.session;
    setCommandsToSession(session, commands);
    editor.commands.addCommands(commands);
}
export function removeLocalCommands(editor, commands) {
    init(editor);
    const session=editor.session;
    const localCommands=getLocalCommands(session);
    for (let k in commands) {
        delete localCommands[k];
    }
    editor.commands.removeCommands(commands);
}
function disableLocalCommands(editor, session=editor.session) {
    const localCommands=getLocalCommands(session);
    editor.commands.removeCommands(localCommands);
    restoreGlobalCommands(editor);
}
function restoreGlobalCommands(editor) {
    const globalCommands=getGlobalCommands(editor);
    editor.commands.addCommands(globalCommands);
}
function restoreLocalCommands(editor, session=editor.session) {
    const localCommands=getLocalCommands(session);
    editor.commands.addCommands(localCommands);
}
