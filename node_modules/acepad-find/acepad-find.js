//!run
import {match} from "textmatcher";
import bottomup from "acepad-bottomup";
const sleep=(t)=>new Promise(s=>setTimeout(s,t));
export function byts(a,b){
    return b.lastUpdate()-a.lastUpdate();
}
export function run(sh){
    let acepad=sh.$acepad;
    let dir;
    let editor=acepad.getEditor();
    let i=acepad.sessionInfo(editor.session);
    if(i.file){
        dir=i.file;
        if(!dir.isDir())dir=dir.up();
    }else{
        dir=sh.cwd;
    }
    let t=editor.getSelectedText()||"";
    let s=createFind(sh,t,dir);
    acepad.changeSession(s);
}
export function createFind(sh,w="",dir="."){
    let acepad=sh.$acepad;
    const {
        locate,editor,createSession,
        sessionInfo,currentLine,print,
        findWord,
    }=acepad;
    //let editor=acepad.getEditor();

    let session;
    //console.log("fnd",acepad);
    function top(){
        let s=editor.session.getSelection();
        s.moveCursorFileStart();
        s.clearSelection();
    }
    function bot(){
        let s=editor.session.getSelection();
        s.moveCursorFileEnd();
        s.clearSelection();
    }
    function onActivated(editor){
        //bot();
        locate(10000,0);
    }
    async function runf(word,editor){
        //editor.setValue("find: "+word+"\n");
        locate(1000);
        session.setValue(initext(word)+"Searching...\n");
        await sleep(0);
        sessionInfo(session,{
            name:"?"+word
        });
        //print("\n");
        //bot();
        window.findWord=word;
        findWord(word);

        const files=[];
        const fil=(typeof word==="string"?
        (line)=>line.indexOf(word)>=0:
        (line)=>word.exec(line)
        );
        //dir.recursive((f)=>files.push(f));
        for (let f of bottomup(dir)) {
            let ln=1;
            //editor.onTextInput("{");
            for(let line of f.lines()){
                if(fil(line)){
                    locate.save(()=>{
                        locate.bottom();
                        print(session,
                            `${f.relPath(dir)}(${ln}): ${line}\n`
                        );
                    });
                }
                ln++;
            }
            await sleep(0);
            //editor.onTextInput("}");
        }
        //top();
    }
    //SYM
    delete window.findWord;
    session= createSession({
        type:"find",
        text:initext(w),
        name:"?"+w,
        onActivated,
        commands:{
            return(){
                onEnter({
                    line:currentLine()
                });
            }
        },
        //onEnter
    });
    function initext(w){
        return "find: "+w+
        "\nsymb: "+w+
        "\nregx: "+w+
        "\ndir: "+dir+
        "\n";
    }
    return session;
    function onEnter(e){
        match(session.getValue(), 
        /\ndir: *([^\n]+)/, (m)=>{dir=sh.resolve(m[1]);});
        match(e.line,
            /^find: *(.*)/,
            (m)=>{
                runf(m[1],editor);
            },
            /^symb: *([\w\d]+)/,
            (m)=>{
                runf(new RegExp("\\b"+m[1]+"\\b"),
                editor);
            },
            /^regx: *(.*)/,
            (m)=>{
                runf(new RegExp(m[1]),editor);
            },
            /^(.*)\((\d+)\):/,
            (m)=>{
                sh.edit(dir.rel(m[1]),{
                    row:m[2]-0,column:0
                });
            },
        );
    }
}

