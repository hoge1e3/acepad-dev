// @hoge1e3/dom-template
import * as updater from "@hoge1e3/dom-updater";
import * as dom from "@hoge1e3/dom";
import {Counter} from "@hoge1e3/counter";
export function renderer(rootNode, rootModel, opt={}){
    const id="r"+Math.floor(100000*Math.random());
    const _updater=updater.updater({
        props(d) {
            const ons=dom.getEventHandlerNames(d);
            return ["value","checked", ...ons];
        },
        isSkippable:opt.isSkippable||((d, s)=>{
            return s.nodeType===Node.ELEMENT_NODE &&
                d.nodeType===s.nodeType &&
                d.getAttribute("data-timestamp") &&
                d.getAttribute("data-timestamp")===
                s.getAttribute("data-timestamp");
        }),
    });
    const self={
        template(model2dom/*(this:renderer, model, ...args)=>dom */) {
            const f= (model, ...args)=>{
                const dom=model2dom.call(renderer, model, ...args);
                const a=self.attr(model);
                for (let k in a) {
                    dom.setAttribute(k, a[k]);
                }
                function fillid(d, path){
                    const c=new Counter();
                    for(let e of d.children){
                        const id=e.getAttribute("id");
                        if(id)continue;
                        const t=c.add(e.tagName);
                        const np=`${path}-${e.tagName}${t}`;
                        e.setAttribute("id",np);
                        fillid(e, np+"-");
                    }
                }
                fillid(dom, a.id+"-");
                return dom;
            };
            return f;
        },
        dom:rootNode,
        node:rootNode,
        model:rootModel,
        update(srcdom) {
            if(srcdom) {
                self.updater.update(rootNode, srcdom);
            } else{
                self.update(self.rootTemplate(rootModel));
            }
        },
        updater:_updater,
        attr:opt.attr||((model)=>({
            id:`${id}-${model.id}`, 
            "data-timestamp":model.timestamp,
        })),
        model2node(model){
            const a=self.attr(model);
            if(!a.id)throw new Error("no id");
            const dst=rootNode.querySelector(`#${id}-${a.id}`);
            return dst;
        },
        partialUpdate(template, model, ...args){
            const dst=self.model2node(model);
            self.updater.update(dst, template(model,...args));
        },
        start(rootModel2Dom){
            // rootModel2Dom: (this:renderer, model, ...args)=>dom
            self.rootTemplate=self.template(rootModel2Dom);
            self.update();
        },
    };
    return self;
}
export function R(obj) {
    obj.id="model"+Math.floor(100000*Math.random());
    obj.update=(e)=>{
        if (e) {
            Object.assign(obj,e);
        }
        obj.timestamp=new Date().getTime();
        return obj;
    };
    obj.update();
    return obj;
}