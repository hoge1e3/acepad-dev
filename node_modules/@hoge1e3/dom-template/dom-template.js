// @hoge1e3/dom-template
import * as updater from "@hoge1e3/dom-updater";
import * as dom from "@hoge1e3/dom";

function renderer(rootDom, rootModel, rootModel2Dom){
    // renderFunc: (renderer)=>void   // renderer.update(dom)
    const id="r"+Math.floor(100000*Math.random());
    const _updater=updater.updater({
        props(d) {
            const ons=dom.getEventHandlerNames(d);
            return ["value","checked", ...ons];
        },
        isSkippable(d, s) {
            return d.getAttribute("data-timestamp") &&
                d.getAttribute("data-timestamp")===
                s.getAttribute("data-timestamp");
        },
    });
    const self={
        template(model2dom/*(this:renderer, model, ...args)=>dom */) {
            return (model, ...args)=>{
                const dom=model2dom.call(renderer, model, ...args);
                const a=self.attr(model);
                for (let k in a) {
                    dom.setAttribute(k, a[k]);
                }
                return dom;
            };
        },
        dom:rootDom,
        model:rootModel,
        update(srcdom) {
            if(srcdom) {
                self.updater.update(rootDom, srcdom);
            } else{
                self.update(self.rootTemplate(rootModel));
            }
        },
        updater:_updater,
        attr(model){
            return {
                id:`${id}-${model.id}`, 
                "data-timestamp":model.lastUpdate,
            };
        },
        partialUpdate(model, srcdom){
            const dst=rootDom.querySelector(`#${id}-${model.id}`);
            self.updater.update(dst, srcdom);
        }
    };
    self.rootTemplate=self.template(rootModel2Dom);
    self.update();
    return self;
}
function R(obj) {
    obj.id="model"+Math.floor(100000*Math.random());
    obj.update=(e)=>{
        if (e) {
            Object.assign(obj,e);
        }
        obj.lastUpdate=new Date().getTime();
        return obj;
    };
    obj.update();
    return obj;
}