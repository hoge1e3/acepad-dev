import {MatchContext,replace,match,Variable} from "./variable.js";
export function *solveExpr(db,predicateExpr,ctx0){
    // predicateExpr may have Variable
    ctx0=ctx0||new MatchContext();
    // ?- p(X)    ctx0 {}
    const [predicate,ctx1]=replace(predicateExpr,ctx0);
    //    p(^X)   ctx1 {X:^X}
    for(let outer of 
        solve(db, predicate, ctx1.outer)){
        let r=new MatchContext(ctx1.inner,outer);
        yield r.replacedInner();
    }
}
export function *solve(db,predicate,outer){
    if(predicate && typeof predicate.solve==="function"){
        yield* predicate.solve(outer);
        return ;
    }
    solve.depth++;
    const ctx=new MatchContext(null,outer);
    // p(Y) :- q(X,Y),r(X).   ctx {}
    for(let p of db){
        const ctx2=match(predicate, p.head, ctx);
        //   ctx2  {Y:^X}
        if(!ctx2)continue;
        if(yield* solveConds(db, p.conds, ctx2)) break; 
    }
    solve.depth--;
}
solve.depth=0;
export function* solveConds(db, conds,ctx){
    // return true if cut
    if(conds.length==0){
        yield ctx.outer;
        return false;
    }
    let [car, ...cdr]=conds;
    if(car===Variable.cut){
        yield* solveConds(db, cdr, ctx);
        return true;
    }
    // car is expr
    [car, ctx]=replace(car, ctx);
    for(let outer of solve(db, car, ctx.outer)){
        const ctx2=new MatchContext(ctx.inner,outer);
        if(yield* solveConds(cdr, ctx2))return true;
    }
    return false;
}
function showAns(res){
    if(res.size==0){
        console.log("yes");
    }
    for(let [k,v] of res){
        if(v===undefined)throw new Error(" null "+k);
        console.log(k,"=",v,"\n");
    }
}