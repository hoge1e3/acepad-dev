// @hoge1e3/timeout
import MutablePromise from "mutable-promise";

const queue=[];
let mp;
export function setTimeout(f,dur){
    try{
        const at=performance.now()+dur;
        if(queue.length==0||
           queue[queue.length-1][0]<=at){
            return queue.push([at,f]);
        }
        let i=0;
        while(queue[i][0]<=at) i++;
        //[3,5,7] at=6  i=2
        queue.splice(i,0,[at,f]);
    }finally{
        if(mp)mp.resolve();
    }
}
export async function main(){
    while(true){
        if(queue.length==0){
            mp=new MutablePromise();
            await mp;
            mp=null;
        }
        const now=performance.now();
        const dur=queue[0][0]-now;
        if(dur>0){
            await sleep(dur);
        }
        const [_,f]=queue.shift();
        f();
    }
}
const sleep=(t)=>new Promise((s)=>globalThis.setTimeout(s,t));

main();
