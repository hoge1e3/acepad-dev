import { EventHandler } from "@hoge1e3/events";

declare interface Ref<T> {
  get(): T;
  set(v: T): void;
  value: T;
  on(event: "change", handler: (e: { prev: T; val: T }) => void): void;
  fire(event: string, payload: any): void;
}

declare interface ComputedRef<T> {
  get(): T;
  value: T;
  on(event: "change", handler: (e: { prev: T; val: T }) => void): void;
  fire(event: string, payload: any): void;
}

export function ref<T>(val: T): Ref<T>;
export function computed<T>(...args: [...Ref<any>[], () => T]): ComputedRef<T>;
