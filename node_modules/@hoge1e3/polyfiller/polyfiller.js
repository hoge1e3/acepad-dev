// @hoge1e3/polyfiller
import {getTrace} from "@hoge1e3/get-trace";
import {EventHandler} from "acepad-events";
import {match} from "textmatcher";
import {indented} from "@hoge1e3/indented";
import {toString} from "@hoge1e3/no-obj-obj";

console.log("p1","loaded polyfiller2");
export function p(id,prop){
    let ptrace=getTrace();
    ptrace.shift();
    let pr=new Proxy(()=>{},{
        get(o,key){
            if(key in prop){
                return Reflect.get(prop,key);
            }
            let trace=getTrace();
            trace.shift();
            events.fire("missing",{
                ptrace,
                proxy:p,id,key,extend,trace,args:[]});
            
            throw new Error(`${key} is Missing.`);
        },
        set(o,key,val){
            Reflect.set(prop,key,val);
        },
        apply(o,self,args){
            if(typeof prop==="function"){
                return prop.apply(self,args);
            }
            if("__call__" in prop){
                return prop.__call__.apply(self,args);
            }
            let trace=getTrace();
            trace.shift();
            events.fire("missing",{
                ptrace,
                proxy:p,id,key:"__call__",
                extend,trace,self,args
            });
        }
    });
    return pr;
}
function getIndent(s){
    return match(s,/^\s*/,(_,s)=>s)||"";
}

export function extend(id,src,key,val){
    let res=[];
    let opl;
    for(let line of src.split("\n")){
        if (line.includes(id)){
            res.push(line);
            let ind=getIndent(line)+"    ";
            val=val||pLiteral();
            val=`"${key}": ${val},`;
            let v=indented(val,ind);
            opl=res.length;
            res.push(v);
            
        }else res.push(line);
    }
    return {src:res.join("\n"),line:opl};
}
export let events=new EventHandler(); 

export function params(n){
    let res=[];
    for(let i=0;i<n;i++){
        res.push(String.fromCharCode(97+i));
    }
    return res.join(", ");
}
export function functionLiteral(args,comment=""){
    return `function (${params(args.length)}) {
    /*${indented(
        argTypes(args)+"\n"+
        comment+"*/\n"+
        `return ${pLiteral()}`,"    ")};
}`;
}
export function pLiteral(){
    let gid=Math.random()+"";
    return `p("${gid}",{\n})`;
}
export function argTypes(args){
    return args.map((e,i)=>{
        const n=String.fromCharCode(i+97)+": ";
        if(typeof e!=="object"){
            return n+typeof e;
        }
        if(!e)return e+"";
        return n+toString (e);
    }).join("\n");
}