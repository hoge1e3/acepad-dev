

/*function builder(...args){
    const b=Builder.clone();//{target});
    return b.apply(...args);
}
builder.custom=(customs)=>{
    const b=Object.create(Builder);
    const c=(name)=>{
        let f=customs[name];
        b[name]=function (...args){
            return f(p(this),...args);
        };
    };
    for(let name in customs)c(name);
    return function (...args){
        return b.clone().apply(...args);
    };
};    */
function p(obj){
    const shouldWrap=(o)=>Builder.isPrototypeOf(o);
    if(!shouldWrap(obj))return obj;
    const handler={
        get(_o,prop){
            if(prop in obj){
                const v=obj[prop];
                if(typeof v==="function"){
                    return function (...args){
                        return p(v.apply(obj,args));
                    };
                }
                return v;
            }
            return function (...a){
                return p(obj.tag(prop,...a));
            };
        },
        apply(_,tx,args){
            return obj.apply(...args);    
        },
        set(_o,k,v){
            return Reflect.set(obj,k,v);
        },
    };
    return new Proxy(function (){},handler);    
}
const Builder={
    tag(name,...a){
        const nt=document.createElement(name);
        if(this.target)this.target.appendChild(nt);
        this.clone({target:nt}).apply(...a);
        return nt;
    },
    custom(name,f){
        this[name]=function (...args){
            return f(p(this),...args);
        };
    },
    apply1(e){
        const d=this.target;
        switch(typeof e){
            case "string":
            case "number":
            case "boolean":
                return this.applyPrimitive(e);
            case "function":
                return this.applyFunction(e);
            case "object":
                if(this.isTarget(e)){
                    return this.applyTarget(e);
                }else if(Array.isArray(e)){
                    return this.applyArray(e);
                }else{
                    return this.applyAttributes(e);
                }
        }
    },
    apply(...a){
        return this.applyArray(a);
    },
    applyArray(a){
        while(a.length){
            const e=a.shift();
            this.apply1(e);
        }
    },
    applyAttribute(k,v){
        if (!this.target) throw new Error("target not set");
        this.target.setAttribute(k,v);
    },
    applyAttributes(a){
        for(let k in a){
            this.applyAttribute(k,a[k]);
        }
    },
    applyTarget(t){
        if (this.target) this.target.appendChild(t);
        return t;
    },
    isTarget(t){
        return t instanceof Node;        
    },
    applyPrimitive(s){
        const n=document.createTextNode(s+"");
        this.target.appendChild(n);
    },
    applyFunction(f){
        let pr=p(this);
        return f.call(pr,pr);
    },
    clone(param){
        const b=Object.create(this);
        Object.assign(b,param);
        return b;
    },
};
export default p(Builder.clone());//{target});

