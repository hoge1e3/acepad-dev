
export default function builder(target,...args){
    const b=Object.create(Builder);
    b.target=target;
    return b.apply(...args);
}
function p(obj){
    const handler={
        get(_o,prop){
            if(prop in obj){
                const v=obj[prop];
                if(typeof v==="function"){
                    return v.bind(obj);
                }
                return v;
            }
            return function (...a){
                return obj.tag(prop,...a);
            };
        },
        apply(_,tx,args){
            return obj.apply(...args);    
        },
        put(_o,k,v){
            obj[k]=v;
        },
    };
    return new Proxy(function (){},handler);    
}
const Builder={
    tag(name,...a){
        const target=this.target;
        const d=document.createElement(name);
        target.appendChild(d);
        this.clone({target:d}).apply(...a);
        return d;
    },
    apply1(e){
        const d=this.target;
        switch(typeof e){
            case "string":
                const n=document.createTextNode(e);
                d.appendChild(n);
                break;
            case "function":
                this.applyFunc(e);
                break;
            case "object":
                for(let k in e){
                    d.setAttribute(k,e[k]);
                }
                break;
        }
    },
    apply(...a){
        while(a.length){
            const e=a.shift();
            this.apply1(e);
        }
    },
    applyStr(s){
        
    },
    applyFunc(f){
        return f(p(this));
    },
    clone(param){
        const b=Object.create(this);
        Object.assign(b,param);
        return b;
    },
};
