type EventOptions = boolean | AddEventListenerOptions;
interface EventData {
    listener: EventListenerOrEventListenerObject;
    options?: EventOptions;
}
declare const EVENT_DATA: unique symbol;
interface EventfulElement extends Element {
    [EVENT_DATA]?: Map<string, Set<EventData>>;
}
export default class EventManager {
    add(target: EventfulElement, type: string, listener: EventListenerOrEventListenerObject, options?: EventOptions): void;
    remove(target: EventfulElement, type?: string, listener?: EventListenerOrEventListenerObject, options?: EventOptions): void;
    overwrite(toEl: EventfulElement, fromEl: EventfulElement, type?: string): void;
    copy(toEl: EventfulElement, fromEl: EventfulElement, type?: string): void;
}
export {};
