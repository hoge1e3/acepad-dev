// acepad-sync-delta
import { assert } from "chai";
function unionKeys(...args) {
    const keys = {};
    for (let i = 0; i < args.length; i++) {
        for (let key in args[i]) {
            keys[key] = 1;
        }
    }
    return keys;
}
function compZipTs(a, b) {
    return Math.floor(a / 2000) - Math.floor(b / 2000);
}
export function getDelta(before, after) {
    assert.ok(before, "before");
    assert.ok(after, "after");
    //console.log("getDelta",before,after);
    var keys = unionKeys(before, after);
    var res = {};
    for (var key in keys) {
        var inb = (key in before), ina = (key in after);
        //console.log("Compare", before[key], after[key], ina, inb);
        if (inb && !ina) {
            // DELETED
            res[key] = { lastUpdate: -1, deleted: true };
        }
        else if (!inb && ina) {
            // CREATED
            res[key] = { lastUpdate: after[key].lastUpdate, created: true };
        }
        else if (compZipTs(before[key].lastUpdate, after[key].lastUpdate)) {
            // MODIFIED
            res[key] = {
                lastUpdate: after[key].lastUpdate,
                modified: true
            };
            //console.log("Added", key, before[key].lastUpdate , after[key].lastUpdate)
        }
        else {
            /*console.log(
                "unmod",key,
                before[key].lastUpdate,
                after[key].lastUpdate);*/
        }
    }
    return res;
}
export function getDeltaDelta(local, remote) {
    const keys = unionKeys(local, remote);
    const res = { downloads: {}, conflicts: {}, uploads: {} };
    for (var key in keys) {
        var inl = (key in local), inr = (key in remote);
        assert.ok(inr || inl, "inrinl");
        if (inr && !inl)
            res.downloads[key] = remote[key];
        if (inr && inl)
            res.conflicts[key] = {
                local: local[key],
                remote: remote[key],
            };
        if (!inr && inl)
            res.uploads[key] = local[key];
    }
    return res;
}
//# sourceMappingURL=delta.js.map