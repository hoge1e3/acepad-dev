import * as s from "./store.js";
import { zip } from "./zip.js";
import os from "os";
const tmpath = os.tmpdir();
//const FS=await getNodeFS();
let FS;
export function setFS(fs) {
    FS = fs;
}
export function validate(data, allownoid = false) {
    if ((!allownoid && !data.__id__) || !data.url) {
        //console.log("data",data);
        throw new Error("no __id__ or url " + allownoid);
    }
    //console.log("datavalid",data);
    return data;
}
export async function put(src) {
    const data = file2data(src);
    const id = await s.put(data);
    const withID = { ...data, __id__: id };
    validate(withID);
    return id;
}
export async function get(id, dst) {
    let data = await s.get(id);
    data2file(validate(data), dst);
}
export function data2file(data, dst) {
    dst.dataURL(validate(data).url);
}
export function file2data(src) {
    return validate({ url: src.dataURL() }, true);
}
export function zip2data(src) {
    return validate(file2data(src), true);
}
export function data2zip(data) {
    validate(data);
    let ram = FS.get(tmpath);
    let zip = ram.rel(data.__id__ + ".zip");
    data2file(data, zip);
    return zip;
}
export async function data2dir(data) {
    validate(data);
    let zipFile = data2zip(data);
    let extracted = zipFile.sibling(data.__id__ + "/");
    await zip.unzip(zipFile, extracted, { overwrite: true });
    return extracted;
}
export async function dir2data(dir, opt) {
    let ram = FS.get(tmpath);
    let n = Math.floor(Math.random() * 100000);
    let zipFile = ram.rel(n + ".zip");
    await zip.zip(dir, zipFile, opt);
    let data = zip2data(zipFile);
    return validate(data, true);
}
//# sourceMappingURL=store-file.js.map