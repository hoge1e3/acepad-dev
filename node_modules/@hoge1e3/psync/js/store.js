// acepad-store
function getHashurl() {
    const hashurl = process.env["STORE_URL"];
    if (!hashurl)
        throw new Error("environment variable 'STORE_URL' not set");
    return hashurl;
}
function getApikey() {
    const apikey = process.env["STORE_KEY"];
    return apikey;
}
function getOpt() {
    const apikey = getApikey();
    const opt = apikey ? { apikey } : {};
    return opt;
}
export async function $get(data = {}) {
    const url = getHashurl();
    const opt = getOpt();
    const queryString = new URLSearchParams({ ...opt, ...data }).toString();
    const fetchUrl = queryString ? `${url}?${queryString}` : url;
    const response = await fetch(fetchUrl, {
        method: 'GET',
    });
    if (!response.ok) {
        await showResponseBody(response);
        throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return await response.json();
}
async function showResponseBody(response) {
    console.log(await response.text());
}
export async function $post(data = {}) {
    const url = getHashurl();
    const opt = getOpt();
    const queryString = new URLSearchParams({ ...opt, ...data }).toString();
    //console.log("post",queryString);
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded', // Specify the content type
        },
        body: queryString, // JSON.stringify({...opt, ...data}),
    });
    if (!response.ok) {
        await showResponseBody(response);
        throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return await response.json();
}
export async function put(data) {
    let r = await $post({
        data: JSON.stringify(data)
    });
    return r.id;
}
export async function get(id) {
    return await $get({ id });
}
export async function init(data = {}) {
    const r = await $post({
        key: "new",
        data: JSON.stringify(data),
    });
    console.log("init", r);
    return await checkout(r.key);
}
export async function checkout(branch, _data) {
    /*let data;
    if(typeof _data==="object") data=_data;
    else if(typeof _data==="string") data={__id__:_data};
    else data=await $get({key:branch}) as Data;
    let head=data.__id__;*/
    const data = _data || await $get({ key: branch });
    const head = data.__id__;
    return {
        data,
        branch,
        async commit(data) {
            data.__prev__ = head;
            let r = await $post({
                key: branch,
                data: JSON.stringify(data),
            });
            data.__id__ = r.id;
            return checkout(branch, data);
        }
    };
}
//# sourceMappingURL=store.js.map