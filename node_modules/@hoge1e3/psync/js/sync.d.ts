import { Data } from "./store-file.js";
export { getDelta, getDeltaDelta } from "./delta.js";
import { WorkDirStatus, DirTree } from "./dot-sync.js";
import { SFile } from "@hoge1e3/sfile";
export { head } from "./store.js";
export { setFS } from "./store-file.js";
export type TemporalRemoteDir = {
    dir: SFile;
    tree: DirTree;
};
export declare function init(dir: SFile, data?: Data): Promise<string>;
export declare function getBranchName(dir: SFile): string;
export declare function branch(dir: SFile): Promise<string>;
export declare function downloadZip(dir: SFile, id: string): Promise<SFile>;
export declare function chain(id: string): Promise<string[]>;
export declare function clone(name: string, dir: SFile): Promise<string>;
export declare function checkout(_dir: SFile): Promise<string>;
export declare class ConfilictError extends Error {
    conflictFiles: {
        src: SFile;
        dst: SFile;
    }[];
    __id__: string;
    constructor(message: string, conflictFiles: {
        src: SFile;
        dst: SFile;
    }[], __id__: string);
}
export declare function commit(_dir: SFile): Promise<string>;
export declare function data2tree(data: Data, info: WorkDirStatus): Promise<TemporalRemoteDir>;
export declare function download(dir: SFile, id: string): Promise<void>;
