import { SFile } from "@hoge1e3/sfile";
import { Checkout } from "./store";
export type DirInfo = {
    lastUpdate: number;
};
export type DirTree = {
    [key: string]: DirInfo;
};
export type TreeData = {
    tree: DirTree;
    __id__: string;
};
export type Config = {
    excludes: string[];
};
export type RepoData = {
    name: string;
    config?: Config;
};
export type SubSyncEntry = {
    __id__: string;
};
export declare function find(dir: SFile): WorkDirStatus;
export type WorkDirStatus = WorkDir & {
    name: string;
    __id__: string;
    treeOfLastCommit: DirTree;
    rmtco?: Checkout;
};
export type ExcludeFunctionWithSubSync = ((f: SFile) => boolean) & {
    subSyncs?: Set<string>;
};
export type WorkDir = {
    isSubSync(f: SFile): boolean;
    inSubSync(f: SFile): boolean;
    repof: SFile;
    treef: SFile;
    dir: SFile;
    sync: SFile;
    getExcludes(): ExcludeFunctionWithSubSync;
    getWorkingTree(writeSubSyncs?: boolean): DirTree;
    updateTree(): void;
    getConfig(): Config;
    writeRepo(obj: RepoData): void;
    readRepo(): RepoData;
    writeTreeFile(obj: TreeData): void;
    readTreeFile(): TreeData;
    init({ name, __id__, config }: {
        name: string;
        __id__: string;
        config?: Config;
    }): void;
    branch(newname: string): void;
};
export declare function instance(dir: SFile, inTmp?: boolean): WorkDir;
export declare function findDotSyncDir(dir: SFile): any;
export declare function conflictFile(f: SFile, id: string): any;
