// @hoge1e3/dependencies
import {KeySet} from "@hoge1e3/keyset";
export function traverse(o, getdeps,opt={}){
    let {key,circular}=opt;
    
    key=key||((e)=>e);
    
    circular=circular||((r)=>{
        console.log("circular",r);
        throw new Error("Circular detected: "+[...r.path,r.k]);
    });
    
    function lp(o,path,memo){
        const k=key(o);
        const result=new KeySet(key);
        if(memo.has(k)){
            return memo.get(k);
        }
        if(path.includes(k)) return addAll(
            result,
            circular({result,o,path,k})
        );
        path.push(k);
        const deps=getdeps(o);
        const succ=()=>{
            memo.set(k,result);
            path.pop();
            return result;
        };
        if(isPromise(deps)){
            return deps.then(async (deps)=>{
                for(let e of deps){
                    result.add(e);
                    addAll(result, await lp(e,path,memo));
                }
                return succ();
            });
        }
        for(let e of deps){
            result.add(e);
            addAll(result, lp(e,path,memo));
        }
        return succ();
    }
    return lp(o,[],new Map());
}
function addAll(s,a){
    for(let e of a)s.add(e);
    return s;
}
function isPromise(p){
    return p&&typeof p.then==="function";
}
