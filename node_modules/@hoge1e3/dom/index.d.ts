/**
 TagGenerator creates HTMLElement
  t=tagGenerator();
  t.tagName( attributes ,  subelements.... )
  t.tagName( subelements.... )
    tagName shoule be substituted to the tag name (ex t.div , t.button ). Any tag name can be accepted(uses proxy internally)
    attributes is plain object
      for key that begins with 'on', function should be given. It is automatically call addEventListener
    subelements shoule be either primitive values(for text node), or HTMLElement


  return HTMLElement

  Example:
    t.div(
        {style:"color:blue;"},
        "hello",
        t.button({
            onclick(){
                alert(3);
            },
            style:"padding:10px;",
        },"go"))
    returns
    <div style="color:blue;">
        hello
        <button style="padding:10px">go</button>
    </div>
    and click event is bound to the button.
 */
export const t:TagGenerator;
export function tagGenerator():TagGenerator;
type TagGenerator={
    [key:string]:TagFunction,
};
type Attribute=object;
type SubElement=Node|string|number|boolean|null|undefined;
type TagFunction=
    ((...args:SubElement[])=>HTMLElement)|
    ((attr:Attribute, ...args:SubElement[])=>HTMLElement);