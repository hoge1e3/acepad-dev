// @hoge1e3/dom
/* global Reflect*/
import isPlainObject from "@hoge1e3/is-plain-object";
export const sym_eventHandlerNames=Symbol("sym_eventHandlerNames");
export function generator() {
    const prop={};
    let pr=new Proxy(prop,{
        get(o,key){
            if(key in prop || typeof key==="symbol"){
                return Reflect.get(prop,key);
            }
            return tagGenerator(key);
        },
        set(o,key,val){
            return Reflect.set(prop,key,val);
        },
        /*apply(o,self,args){
        }*/
    });
    return pr;
}
function isPrimitive(v) {
    return (
        typeof v!=="function" && 
        typeof v!=="object") || v==null;
}
export function tagGenerator(tag) {
    return (...args)=>{
        const d=document.createElement(tag);
        while(args.length){
            let a=args.shift();
            if(isPlainObject(a)){
                for(let k in a){
                    if(typeof k==="symbol" ||
                       k.match(/^on/)){
                        d[k]=a[k];
                        addEventHandlerName(d,k);
                    }else{
                        d.setAttribute(k,a[k]);
                    }    
                }
            }else if(isPrimitive(a)){
                d.appendChild(document.createTextNode(a+""));
            }else{
                d.appendChild(a);
            }
        }
        return d;
    };
}
export function addEventHandlerName(d, name) {
    if (!d[sym_eventHandlerNames]){
        d[sym_eventHandlerNames]=new Set();
    }
    d[sym_eventHandlerNames].add(name);
}
export function getEventHandlerNames(d) {
    if (!d[sym_eventHandlerNames]){
        return new Set();
    }
    return d[sym_eventHandlerNames];
}
