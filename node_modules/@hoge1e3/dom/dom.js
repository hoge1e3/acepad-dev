// @hoge1e3/dom
/* global Reflect*/
import isPlainObject from "@hoge1e3/is-plain-object";
export function generator() {
    const prop={};
    let pr=new Proxy(prop,{
        get(o,key){
            if(key in prop || typeof key==="symbol"){
                return Reflect.get(prop,key);
            }
            return tagGenerator(key);
        },
        set(o,key,val){
            return Reflect.set(prop,key,val);
        },
        /*apply(o,self,args){
        }*/
    });
    return pr;
}
export function tagGenerator(tag) {
    return (...args)=>{
        const d=document.createElement(tag);
        while(args.length){
            let a=args.shift();
            if(isPlainObject(a)){
                for(let k in a){
                    if(k.match(/^on/)){
                        d[k]=a[k];
                    }else{
                        d.setAttribute(k,a[k]);
                    }    
                }
            }else if(typeof a==="string"){
                d.appendChild(document.createTextNode(a));
            }else{
                d.appendChild(a);
            }
        }
        return d;
    };
}