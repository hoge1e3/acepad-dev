// @hoge1e3/dom-updater
export function update(dst,src,{
    findUpdatable,
    isUpdatable,
    isSkippable,
}){
    const updator={
        root:dst,
        trashed:new Set(),
        trash(dom){
            updator.trashed.add(dom);
        },
        kept:new Set(),
        keep(dom){
            updator.trashed.delete(dom);
            updator.kept.add(dom);
        },
    };
    function u(d, s){
        uattr(d, s);
        uprop(d, s);
        let i=0;
        const ins=(n)=>{
            d.insertBefore(n,d.children[i]);
            updator.keep(n);
            i++;
        };
        for(let sc of s.children){
            const dc=findUpdatable.call(updator,sc);
            if(!dc){
                ins(s);
            }else{
                ins(dc);
                if(!isSkippable.call(updator,dc,sc)){
                    u(dc,sc);
                }
            }
        }
        for(;i<d.children.length;i++){
            updator.trash(d.children[i]);
        }
    }
    function uattr(d, s){
        const ds=new Set();
        for(let a of d.attributes){
            ds.add(a.name);
        }
        for(let a of s.attributes){
            if(d.getAttribute(a.name)!==a.value){
                d.setAttribute(a.name, a.value);
            }
            ds.delete(a.name);
        }
        for (let n of ds) {
            d.removeAttribute(n);
        }
    }
    function uprop(d, s){
        const ds=new Set();
        for(let a of props(d)){
            ds.add(a.name);
        }
        for(let a of props(s)){
            if(d[a]!==s[a]){
                d[a]=s[a];
            }
            ds.delete(a.name);
        }
        for (let n of ds) {
            delete d[n];
        }
    }
    function props(d){
        if(d.tagName==="input"||d.tagName==="textarea"){
            return ["value","checked"];
        }
        /*for(let k in d){
            if(d.hasOwnProperty(k)){
                r.push(k);
            }
        }*/
        return [];
    }
    u(dst, src);
    for(let t of updator.trashed){
        t.parentNode.removeChild(t);
    }
}