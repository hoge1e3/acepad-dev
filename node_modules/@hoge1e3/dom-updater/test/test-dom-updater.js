import * as dom from "@hoge1e3/dom";
import * as updater from "@hoge1e3/dom-updater";
import * as assert from "assert";
import {show} from "acepad-widget";
const t=dom.generator();
export async function main(){
    const {element}=show(t.div(),{overlay:true});
    const items=R([
        R({text:"AAA"}),
        R({text:"BBB"}),
    ]);
    const base=t.div({id:items.id});
    element.appendChild(t.style(`
.domup button{
    padding: 10px;
    border: solid black 1px;
    font-size: 20px;
    font-color: white;
    background: #8da;
}
`));
    element.appendChild(base);
    await this.sleep(0.1);
    const r=renderer(base, items, (renderer)=>{
        function addItem() {
            const item=R({});
            item.text=`#${item.id}`;
            items.push(item);
            items.update();
            renderer.update();
        }
        function ud(item,by){
            const i=items.indexOf(item);
            items.splice(i,1);
            items.splice(i+by,0,item);
            items.update();
            renderer.update();
        }
        function del(item){
            const i=items.indexOf(item);
            items.splice(i,1);
            items.update();
            renderer.update();
        }
        const a=renderer.attr;
        const btn=(onclick,tx)=>
            t.button({onclick},tx);
        const renderItem=(item)=>(
            t.div({...a(item)},
                t.input({
                    value:item.text,
                    oninput() {
                        item.update({text:this.value});
                        renderer.update();
                    }
                }),
                btn(()=>ud(item,-1),"up"),
                btn(()=>ud(item,1),"dw"),
                btn(()=>del(item),"x"),
                item.text,
            )
        );
        renderer.update(
            t.div({...a(items),class:"domup"}, 
                btn(addItem,"Add"),
                ...items.map(renderItem),
            )
        );
    });
}
function renderer(rootDom, model, renderFunc){
    // renderFunc: (renderer)=>void   // renderer.update(dom)
    const id="r"+Math.floor(100000*Math.random());
    const _updater=updater.updater({
        props(d) {
            const ons=dom.getEventHandlerNames(d);
            return ["value","checked", ...ons];
        },
        isSkippable(d, s) {
            return d.nodeType===Node.ELEMENT_NODE &&
                s.nodeType===Node.ELEMENT_NODE &&
                d.getAttribute("data-timestamp") &&
                d.getAttribute("data-timestamp")===
                s.getAttribute("data-timestamp");
        },
    });
    const self={
        dom:rootDom,
        model,
        update(srcdom) {
            if(srcdom) {
                self.updater.update(rootDom, srcdom);
            } else{
                renderFunc(self);
            }
        },
        updater:_updater,
        attr(model){
            return {
                id:`${id}-${model.id}`, 
                "data-timestamp":model.lastUpdate,
            };
        },
        partialUpdate(model, srcdom){
            const dst=rootDom.querySelector(`#${id}-${model.id}`);
            self.updater.update(dst, srcdom);
        }
    };
    self.update();
    return self;
}
function R(obj) {
    obj.id="item"+Math.floor(100000*Math.random());
    obj.update=(e)=>{
        if (e) {
            Object.assign(obj,e);
        }
        obj.lastUpdate=new Date().getTime();
        return obj;
    };
    obj.update();
    return obj;
}