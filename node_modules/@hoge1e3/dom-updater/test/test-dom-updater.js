import * as dom from "@hoge1e3/dom";
import * as updater from "@hoge1e3/dom-updater";
import * as assert from "assert";
import {show} from "acepad-widget";
const t=dom.generator();
export async function main(){
    const {element}=show();
    const items=R([
        R({text:"AAA"}),
        R({text:"BBB"}),
    ]);
    const base=t.div({id:items.id});
    element.appendChild(base);
    await this.sleep(0.1);
    const r=renderer(base, items, (renderer)=>{
        function addItem() {
            items.push(R({
                text:`some Item `,
            }));
            items.update();
            renderer.update();
        }
        renderer.update(
            t.div({...renderer.attr(items)}, 
                ...items.map((item)=>
                    t.div({...renderer.attr(item)},item.text)
                ),
                t.button({id:"addb",onclick:addItem},"Add"),
            )
        );
    });
    
    /*const update=()=>updater.update(base, render(items, update),{
        props(d) {
            const ons=dom.getEventHandlerNames(d);
            return ["value","checked", ...ons];
        },
        isSkippable(d, s) {
            return d.getAttribute("data-timestamp") &&
                d.getAttribute("data-timestamp")===
                s.getAttribute("data-timestamp");
        },
    });
    update();
    if (document.querySelectorAll("#list").length>1) {
        throw new Error("#list is duplicated!");
    }*/
}
function renderer(rootDom, model, renderFunc){
    // renderFunc: (renderer)=>void   // renderer.update(dom)
    const id="r"+Math.floor(100000*Math.random());
    const _updater=updater.updater({
        props(d) {
            const ons=dom.getEventHandlerNames(d);
            return ["value","checked", ...ons];
        },
        isSkippable(d, s) {
            return d.getAttribute("data-timestamp") &&
                d.getAttribute("data-timestamp")===
                s.getAttribute("data-timestamp");
        },
    });
    const self={
        dom:rootDom,
        model,
        update(srcdom) {
            if(srcdom) {
                self.updater.update(rootDom, srcdom);
            } else{
                renderFunc(self);
            }
        },
        updater:_updater,
        attr(model){
            return {
                id:`${id}-${model.id}`, 
                "data-timestamp":model.lastUpdate
                
            };
        },
        partialUpdate(model, srcdom){
            const dst=dom.querySelector(`#${id}-${model.id}`);
            self.updater.update(dst, srcdom);
        }
    };
    self.update();
    return self;
}
/*
function render(items, update) {
    function addItem() {
        items.push(R({
            text:`some Item `,
        }));
        items.update();
        update();
    }
    return t.div({...attr(items)}, 
        ...items.map((item)=>
            t.div({...attr(item)},item.text)
        ),
        t.button({id:"addb",onclick:addItem},"Add"),
    );
}
function attr(item) {
    return {id:item.id, "data-timestamp":item.lastUpdate};
}*/
function R(obj) {
    obj.id="item"+Math.floor(100000*Math.random());
    obj.update=(e)=>{
        if (e) {
            Object.assign(obj,e);
        }
        obj.lastUpdate=new Date().getTime();
        return obj;
    };
    obj.update();
    return obj;
}