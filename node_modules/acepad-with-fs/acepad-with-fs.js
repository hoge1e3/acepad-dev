// acepad-with-fs
import {open} from "acepad-browser";
import {trial,debugSession} from "acepad-debug";
import {showWidget} from "acepad-widget";
import {initVConsole,showVConsole} from "show-vconsole";
import {run} from "acepad-find";
import unload from "@hoge1e3/unload";
import {Menu} from "acepad-menu";
import {openFile} from "acepad-files";
import {init} from "acepad";
import * as fkeys from "acepad-function-keys";
/*global $*/
export async function main(){
    const sh=this;
    const dirn=sh.resolve(
        import.meta.url
    ).up();
    const dir_nodem=dirn.up();
    setPath(sh,dir_nodem);

    await open(dirn.rel("ace.html"));
    const {setForce}=unload({
        oncancel(){
           setTimeout(()=> 
          document.documentElement.requestFullscreen().then(
              ()=>document.exitFullscreen())
        ,100);  
        }
    });
    const acepad=window.acepad=await init();   
    sh.$acepad=window.acepad;
    //let {openFile}=await sh.jsm("acepad-files");
    acepad.attachCommands({
        "ctrl-r":()=>{/*alert("reload");*/location.reload();},
        showDebug:{bindKey:"ctrl-d",exec(){
            acepad.changeSession("*debug*");
        }},
        find:{
            bindKey:"ctrl-f",
            exec(){
                run(sh);
            }
        },
        "ctrl-u":()=>{
            let si=acepad.sessionInfo(
                acepad.getMainEditor().session);
            if(si.file){
                openFile(sh, si.file.up());
            }
        },
        "ctrl-o":()=>{
            showVConsole();
        },
        /*ses(){
            acepad.changeSession("*sessions*");
        },*/
        "ctrl-g":()=>{
            const editor=acepad.getCurrentEditor();
            editor.renderer.setShowGutter(
                !editor.renderer.getShowGutter());
        },

    });
    async function ngram(){
        for(let f of sh.resolve(".").recursive()){
            if(f.ext()!==".js")continue;
            let s=f.text();
            acepad.addToNgram(s);
            await 0;
        }
    }
    //ngram();
    initVConsole();
    /*acepad.showMenuButtons({
        cons(){
            showVConsole();
        },
        
    });*/
    initMenuButtons(acepad);
    openFile(sh,"./");
    debugSession(sh);
    autogutt(acepad);
    fkeys.show(acepad);
    //sh.ngr2();
    //sh["acepad-suggest.js"]();
    sh.keysel(1);
    // sh.jsm("@hoge1e3/no-obj-obj");
    return acepad;
}
function setPath(sh,nodem){
    sh.addPath(nodem.rel(".bin/").path());
    //sh.addPath(sh.resolve("bin/").path());
}
let prevs;
export function initMenuButtons(acepad){
    let {events,sessionInfo,changeSession}=acepad;
    let menu=Menu(acepad.getMainEditor());
    return;
    events.on("createSession",({name,session})=>{
        //console.log(name);
        let m;
        let si=sessionInfo(session);
        si.on("infochanged",(d)=>{
            m.text(d.name);
        });
        m=menu.add(name,()=>{
            changeSession(session);
        }); 
        si.on("remove",()=>{
            m.remove();
        });
        m.go2nd();
        menu.sort();
        si.menuButton=m;
    });
    events.on("changeSession",({oldSession,session})=>{
        let si=sessionInfo(session);
        let osi=sessionInfo(oldSession);
        if(!si.menuButton||!osi.menuButton)return ;
        $(osi.menuButton.element).removeClass("selected");
        $(si.menuButton.element).addClass("selected");
        si.menuButton.setOrder(0);
        osi.menuButton.setOrder(0);
        
        menu.sort();
    });
    menu.add({
       /* cons(){
            showVConsole();
        },
        ses(){
            acepad.changeSession("*sessions*");
        },
        gutt(){
            const editor=acepad.getCurrentEditor();
            editor.renderer.setShowGutter(
                !editor.renderer.getShowGutter());
        },*/
    });
}
function autogutt(acepad){
    //!run
    const renderer=acepad.getMainEditor().renderer;
    setInterval( ()=>{
        const g=renderer.getShowGutter();
         if (g&&renderer.getScrollLeft()>50) {
            renderer.setShowGutter(false);
        } else  if (!g&&renderer.getScrollLeft()<1) {
            renderer.setShowGutter(true);
        }
   
    },100);
    
}
