#!run
import _n from "./NativeFS.js";
import FS from "@hoge1e3/fs";
export async function main(){
    const {fakeNodeEnvironment}=await import("https://unpkg.com/petit-fs@1.0.1/dist/index.js");
    //"https://bitarrow3.eplang.jp/acepad/vfs.js");
    //console.log(fs);
    fakeNodeEnvironment();
    
    const fs=require("fs");//new fsm.FileSystem();
    await loadTypeScriptCompiler();
    console.log(ts,fs);
    return ;
    const NativeFS=_n(fs);
    FS.mount("/n/",new NativeFS("/show/"));
    this.cat("/n/index.js");
    this.ls("/n/");
    this.echo(...fs.readdirSync("/jsmod/"));
    const c=fs.readFileSync("/jsmod/sbin/loadfs","utf-8");
    //this.echo(c);
}
function loadTypeScriptCompiler() {
  return new Promise((resolve, reject) => {
    if (window.ts) {
      resolve(window.ts);
      return;
    }

    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/typescript/5.3.2/typescript.min.js';
    script.onload = () => resolve(window.ts);
    script.onerror = reject;
    document.head.appendChild(script);
  });
}

function watch(path,...opts){
    let sec=opts.shift();
    let options, listener;
    if(typeof sec==="function"){
        listener=sec;
        options={};
    }else {
        options=sec||{};
        listener=opts.shift();
    }
    rfs.addObserver(this.path(),function (path, meta) {
        listener(meta.eventType, path,meta );
    });
}
function watchFile(path,...opts){
    let sec=opts.shift();
    let options, listener;
    if(typeof sec==="function"){
        listener=sec;
        options={};
    }else {
        options=sec||{};
        listener=opts.shift();
    }
    const inter=options.interval||5000;
    let prev=fs.statSync(path);
    function loop(){
        const cur=fs.statSync(path);
        if(cur.mtimeMs!==prev.mtimeMs){
            listener(prev,cur);
            prev=cur;
        }
    }
    setInterval(loop,inter);
}
function isDir(path){
    assert.is(arguments, [Absolute]);
    if(P.isDir(path))return true;
    var name = P.name(path);
    var parent = P.up(path);
    if (parent == null) return true;
    var pinfo = this.getDirInfo(parent);
    var res = pinfo[name];
    if(res)return false;
    var resd = pinfo[name+"/"];
    if(resd)return true;
    return false;
}
function exists(path){
    assert.is(arguments, [Absolute]);
    var name = P.name(path);
    var parent = P.up(path);
    if (parent == null) return true;
    var pinfo = this.getDirInfo(parent);
    var res = pinfo[name];
    if(res)return true;
    if(P.isDir(path))return false;
    var resd = pinfo[name+"/"];
    if(resd)return true;
    return false;
}